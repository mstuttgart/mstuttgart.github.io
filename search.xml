<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lições da Minha Primeira Game Jam</title>
      <link href="/2021/04/2021-04-04-o-que-aprendi-na-minha-primeira-Game-Jam/"/>
      <url>/2021/04/2021-04-04-o-que-aprendi-na-minha-primeira-Game-Jam/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo bem com vocês?</p><p>Neste ano de 2021, eu decidi sair da minha zona de conforto e iniciar um hobby que a muito tempo<br>eu desejava iniciar e sempre ficava postergando: o desenvolvimento de jogos eletrônicos.</p><p>Como alguém que passou boa parte da infância e adolescência acompanhado de bons jogos (bons tempos de Donkey Kong Country e Top Gear), eu sempre tive um carinho especial por eles e sempre me interessei em saber como eles funcionavam e eram contruidos.</p><p>No o inicio do ano, tirei proveito do ‘poder’ das resoluções de fim de ano e dei o passo inicial nos meus estudos, agora de maneira séria. Neste <em>post</em> pretendo explanar algumas coisas que aprendi nesse inicio da minha caminhada e ao participar da minha primeira Game Jam.</p><p>Sendo assim, caro leitor, espero que este <em>post</em> te consiga te incentivar, pelo menos um pouco, a dar o passo inicial no mundo do desenvolvimento de jogos ou qualquer outra área que você deseje começar a estudar.</p><h2 id="Pare-de-depender-da-motivacao"><a href="#Pare-de-depender-da-motivacao" class="headerlink" title="Pare de depender da motivação"></a>Pare de depender da motivação</h2><p>Nos anos anteriores, eu tentei estudar diversos assuntos que eu achava interessantes, seja relacionados a TI ou não. O problema que eu muitas vezes me deparava era com a infinidade de possibilidades que encontramos pela Internet a fora. Existem muitas linguagens de programação diferentes, dezenas de editores, dezenas de ferramentas destinadas a resolução de um mesmo problema, e por ai vai.</p><p>A grande quantidade de opções muitas vezes mais me atrapalhou do que ajudou, eu sempre perdia muito tempo escolhendo a melhor ferramenta, o melhor editor, a melhor biblioteca para determinada tarefa e etc. Isso consumia meu tempo e meu animo, fazendo que com que muitas vezes eu mal conseguisse estudar tudo o que eu desejava.</p><p>Felizmente, com o passar dos anos, eu aprendi a gerenciar esse ‘perfeccionismo’ e decidi que de fato iria colocar a mão na massa e realmente estudar. Nesta sessão eu vou abordar a ferramentas que utilizei a fim de facilitar o caminho para quem também deseja começar.</p><h2 id="Devo-criar-minha-propria-engine"><a href="#Devo-criar-minha-propria-engine" class="headerlink" title="Devo criar minha própria engine?"></a>Devo criar minha própria engine?</h2><blockquote><p>Não.</p></blockquote><p>Se o seu foco é desenvolver jogos, eu recomendo fortemente utilizar um engine já pronta e bem documentada. Salvo se seu objetivo for aprender a desenvolver uma engine de jogos, criar sua engine “na mão” só vai tirar seu foco do que realmente importa, que é aprender a programar jogos!</p><p>Eu comecei meus estudos com a engine <a href="https://godotengine.org/">Godot</a> que é gratuíta, possui um suporte muito bom ao Linux (meu OS de estudo&#x2F;trabalho) e possui uma documentação muito completa e uma quantidade razoavel de tutoriais pela internet.</p><h2 id="Cuidado-com-o-Tutorial-Hell"><a href="#Cuidado-com-o-Tutorial-Hell" class="headerlink" title="Cuidado com o Tutorial Hell"></a>Cuidado com o Tutorial Hell</h2><p>Depender demaos de tutoriais pode fazer você cair no <em>Tutorial Hell</em>.</p><blockquote><p><strong>Tutorial Hell</strong> é uma expressão usada para designar o habito de fazer tutoriais ou cursos um após o outro, sem nunca realmente por em prática o conhecimento adquirido, por insegurança de não saber o suficiente sobre determinado assunto.</p></blockquote><p>Meu conselho aqui seria evitar ficar vendo tutoriais em demasia. É normal nos sentirmos inseguros quando começamos a utilizar uma ferramenta ao qual não estamos acostumados. Podemos aprender muito assistindo tutoriais no Youtube ou fazendo cursos, mas isso também pode acabar nos prendendo em um tipo de preguiça disfaçada de estudo (sim, nem toda preguiça implica em ausência de esforço), onde ficamos presos a tutoriais e nunca de fato iniciamos algo por nós mesmos. Sendo assim, eu recomendo o que funcionou pra mim:</p><p>Eu dei uma lida nos capítulos inicias da página de documentação <a href="https://docs.godotengine.org/en/stable/getting_started/step_by_step/index.html">aqui</a>. Dê foco ao capítulos: <strong>Introduction to Godot’s editor</strong>, <strong>Scenes and nodes</strong>, <strong>Instancing</strong>, <strong>Scripting</strong> e <strong>Signals</strong>.</p><p>Em seguida fiz o tutorial <strong>“You Fist Game”</strong> da própria documentação da Godot (em ingles): link <a href="https://docs.godotengine.org/en/stable/getting_started/step_by_step/your_first_game.html">aqui</a>.</p><p>Após isso, coloquei a “mão na massa” e comecei a contruir pequenos protótipos de jogos (coisas simples mesmo). Fiz um projetinho de jogo de plataforma, para aprender como é construído o cenário e como são aplicados os efeitos de gravidade durante o pulo do personagem entre outras coisas básicas. Tentei desenvolver o máximo usando a documentação e aprendi um bocado no processo. A documentação da Godot é bem completa e detalhada, então faça bom uso dela! Se desejar ver algum tutorial, não tem problema. O importante é não ficar preso a eles e colocar a mão na massa. Nunca vamos nos sentir totalmente preparados para fazer algo novo, então é melhor começar o quanto antes.</p><h2 id="Sobre-a-GameJam"><a href="#Sobre-a-GameJam" class="headerlink" title="Sobre a GameJam"></a>Sobre a GameJam</h2><p>Sobre a GameJam, eu participei da <a href="https://itch.io/jam/nokiajam3">NOKIA 3310 GameJam</a>, que foi uma GameJam cujo objetivo era criar um game seguindo as restrições do NOKIA 3310. Isso inclui utilizar as mesmas paletas de cores e tipos de audio do celular. Foi bem legal trabalhar dentro desse escopo limitado.</p><h3 id="O-jogo-Hostile-Terraqueo"><a href="#O-jogo-Hostile-Terraqueo" class="headerlink" title="O jogo: Hostile Terraqueo"></a>O jogo: Hostile Terraqueo</h3><p>Dado o prazo da Jam e considerando minha falta de experiência com a engine, tempo limitado para o projeto, eu resolvi começar com algo simples mas que fosse divertido. Como resultado, projetei o <em>game</em> <a href="https://mstuttgart.itch.io/hostile-terraqueo">Hostile Terraqueo</a>. Ele é um game de apenas uma tela que desafia o jogador a sobreviver o maior tempo possível com direito até a uma história.</p><blockquote><p>Um alien decide passar suas férias na Terra. Mas quando chega aqui, ele é recebido por inúmeros terráqueos infurecidos lançando Nokias 331) sobre ele (que conhece o celular, sabe como isso é mortal). Seria o alien capaz de sobreviver as suas férias.</p></blockquote><p>Eu levei pouco mais de 17 horas para desenvolver o <em>game</em>. Não ganhei a Jam (tinha outros jogos muito mais incríveis), mas fiquei muito satisfeito com o projeto e com o <em>feedback</em> que recebi.</p><p>Abaixo você pode encontrar a página do <em>game</em> e o repositorio com o código.</p><ul><li><a href="https://github.com/mstuttgart/hostile-terraqueo">Github</a></li><li><a href="https://mstuttgart.itch.io/hostile-terraqueo">Hostile Terraqueo</a></li></ul><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Este <em>post</em> é resumo de algumas das lições que aprendi ao participar da minha primeira GameJam. Foi muito interessate projetar algo funcional em tão pouco tempo, gerenciar requisitos, ideias e também interagir com outros desenvolvedores e testar as submissões deles e também receber <em>feedback</em> diretamente do pulbico alvo: o jogador. Espero que essas lições também possam ser uteis para você, leitor.</p><p>Obrigado por ler até aqui!</p>]]></content>
      
      
      <categories>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gamedevelopment </tag>
            
            <tag> gamejam </tag>
            
            <tag> godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crie dicts a partir de outros dicts com Python</title>
      <link href="/2018/04/2018-04-09-post-criando-dict-a-partir-de-dois-ou-mais-dicts/"/>
      <url>/2018/04/2018-04-09-post-criando-dict-a-partir-de-dois-ou-mais-dicts/</url>
      
        <content type="html"><![CDATA[<p>Neste tutorial, será abordado o processo de criação de um <em>dict</em> ou dicionário, a partir de um ou mais <em>dicts</em> em Python. </p><p>Como já é de costume da linguagem, isso pode ser feito de várias maneiras diferentes.</p><h2 id="Abordagem-inicial"><a href="#Abordagem-inicial" class="headerlink" title="Abordagem inicial"></a>Abordagem inicial</h2><p>Pra começar, vamos supor que temos os seguintes dicionários:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict_1 = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dict_2 = &#123;</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Como exemplo, vamos criar um novo dicionário chamado <strong>new_dict</strong> com os valores de <strong>dict_1</strong> e <strong>dict_2</strong> logo acima. Uma abordagem bem conhecida é utilizar o método <em>update</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">new_dcit.update(dict_1)</span><br><span class="line">new_dcit.update(dict_2)</span><br></pre></td></tr></table></figure><p>Assim, temos que <strong>new_dict</strong> será:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Este método funciona bem, porém temos de chamar o método <em>update</em> para cada <em>dict</em> que desejamos mesclar em <strong>new_dict</strong>. Não seria interessante se fosse possível passar todos os <em>dicts</em> necessários já na inicialização de <strong>new_dict</strong>?</p><h3 id="Novidades-do-Python-3"><a href="#Novidades-do-Python-3" class="headerlink" title="Novidades do Python 3"></a>Novidades do Python 3</h3><p>O Python 3 introduziu uma maneira bem interessante de se fazer isso, utilizando os operadores <code>**</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_dict = &#123;</span><br><span class="line">    **dict_1,</span><br><span class="line">    **dict_2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Assim, de maneira semelhante ao exemplo anterior, temos que <strong>new_dict</strong> será :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict[<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="Copia-real-de-dicts"><a href="#Copia-real-de-dicts" class="headerlink" title="Cópia real de dicts"></a>Cópia real de <em>dicts</em></h2><p>Ao utilizamos o procedimento de inicialização acima, devemos tomar conseiderar alguns fatores. Apenas os valores do primeiro nível serão realmente duplicados no novo dicionário. Como exemplo, vamos alterar uma chave presente em ambos os <em>dicts</em> e verificar se as mesmas possuem o mesmo valor:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; dict_1[<span class="string">&#x27;a&#x27;</span>] = <span class="number">10</span></span><br><span class="line">&gt;&gt; new_dict[<span class="string">&#x27;a&#x27;</span>] = <span class="number">11</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(dict_1[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>Porém isso muda quando um dos valores de <strong>dict_1</strong> for uma <em>list</em>, outro <em>dict</em> ou algum objeto complexo. Por exemplo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_3 = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>e agora, vamos criar um novo <em>dict</em> a partir desse:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new_dict = &#123;</span><br><span class="line">    **dict_3,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Como no exemplo anterior, podemos imaginar que foi realizado uma cópia de todos os elementos de <strong>dict_3</strong>, porém isso não é totalmente verdade. O que realmente aconteceu é que foi feita uma cópia <em>superficial</em> dos valores de <strong>dict_3</strong>, ou seja, apenas os valores de <em>primeiro nível</em> foram duplicados. Observe o que acontece quando alteramos o valor do <em>dict</em> presente na chave <strong>c</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; new_dict[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>] = <span class="number">11</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="number">11</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(dict_3[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="comment"># valor anterior era 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>No caso da chave <strong>c</strong>, ela contem uma referência para outra estrutura de dados (um <em>dict</em>, no caso). Quando alteramos algum valor de <strong>dict_3[‘c’]</strong>, isso reflete em todos os <em>dict</em> que foram inicializados com <strong>dict_3</strong>. Em outras palavras, deve-se ter cuidado ao inicializar um <em>dict</em> a partir de outros <strong>dicts</strong> quando os mesmos possuírem valores complexos, como <em>list</em>, <em>dict</em> ou outros objetos (os atributos deste objeto não serão duplicados).</p><p>De modo a contornar este inconveniente, podemos utilizar o método <em>deepcopy</em> da <em>lib</em> nativa <a href="https://docs.python.org/2/library/copy.html">copy</a>. Agora, ao inicializarmos <strong>new_dict</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">dict_3 = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new_dict = copy.deepcopy(dict_3)</span><br></pre></td></tr></table></figure><p>O método <em>deepcopy</em> realiza uma cópia recursiva de cada elemento de <strong>dict_3</strong>, resolvendo nosso problema. Veja mais um exemplo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; new_dict[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>] = <span class="number">11</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(new_dict[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="number">11</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(dict_3[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="comment"># valor não foi alterado</span></span><br></pre></td></tr></table></figure><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Este artigo tenta demonstrar de maneira simples a criação de <em>dicts</em>, utilizando os diversos recursos que a linguagem oferece bem como os prós e contras de cada abordagem. </p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><p>Para mais detalhes e outros exemplos, deem uma olhada neste <em>post</em> do forum da Python Brasil <a href="https://groups.google.com/forum/#!topic/python-brasil/OhUqYQ32M7E">aqui</a>.</p><p>É isso pessoal. Espero que esta dica seja útil para vocês!</p><p>Até o próximo post!</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tutorial </tag>
            
            <tag> dict </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Como reiniciar a configuração dos painéis de menu no Mate/Cinnamon</title>
      <link href="/2018/01/2018-01-21-linux-mint:-como-reiniciar-ambiente-grafico-mate-e-cinnamon/"/>
      <url>/2018/01/2018-01-21-linux-mint:-como-reiniciar-ambiente-grafico-mate-e-cinnamon/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo certo?</p><p>Algum tempo atrás, eu removi alguns <em>apps</em> do painel de menu do meu <em>Cinnamon</em> sem querer e, após alguma pesquisa, encontrei uma maneira prática de restaurá-lo para a sua configuração inicial. Sendo assim, eu decidi compartilhar a solução, na esperança que isso seja útil para mais alguém.</p><h2 id="Como-reiniciar-o-painel"><a href="#Como-reiniciar-o-painel" class="headerlink" title="Como reiniciar o painel"></a>Como reiniciar o painel</h2><p>Os comando a seguir foram testados nos ambientes <em>Mate</em> e <em>Cinnamon</em> do Linux Mint (versões 17+ e 18+). Não testei o funcionamento em outras <em>distros</em> que também utilizam <em>Mate</em>&#x2F;<em>Cinnamon</em>, mas acredito que os comandos devem funcionar nelas também, provavelmente.</p><p>Para reiniciar os painéis dos ambientes, abra o terminal e entre com um dos comandos abaixo, de acordo com seu ambiente:</p><ul><li>Ambiente <em>Cinnamon</em>:</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings reset-recursively org.cinnamon</span><br></pre></td></tr></table></figure><ul><li>Ambiente <em>Mate</em>:</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings reset-recursively org.mate.panel</span><br></pre></td></tr></table></figure><p>Após digitar os comandos, tecle <em>Enter</em>. O ambiente gráfico vai recarregar e todos os painéis irão voltar a sua configuração inicial. Pode ser que seja necessário reiniciar o sistema para que todos os painéis efetivamente voltem para suas posições corretas.</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><p>Eu encontrei esta dica no fórum do Linux Mint <a href="https://community.linuxmint.com/tutorial/view/2195">aqui</a>. Sendo assim, os créditos pela resolução do problema são do autor do <em>post</em> no fórum, o usuário <a href="https://community.linuxmint.com/user/view/138919">valdy9</a>.</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>É isso pessoal. Qualquer dúvida, é só deixar um comentário. Ótima semana para vocês!</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux mint </tag>
            
            <tag> cinnamon </tag>
            
            <tag> mate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Como calcular a diferença de dias entre duas datas com Python</title>
      <link href="/2017/10/2017-10-03-python-calculando-dias-de-diferenca-entre-duas-datas/"/>
      <url>/2017/10/2017-10-03-python-calculando-dias-de-diferenca-entre-duas-datas/</url>
      
        <content type="html"><![CDATA[<p>Neste tutorial vou mostrar um procedimento bem simples que utilizei recentemente para calcular a diferença de dias entre duas datas com a biblioteca nativa <em>datetime</em>.</p><p>Inicialmente, calculamos a data inicial e a data final:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data final</span></span><br><span class="line">d2 = datetime.strptime(<span class="string">&#x27;2017-05-05&#x27;</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data inicial</span></span><br><span class="line">d1 = datetime.strptime(<span class="string">&#x27;2017-05-01&#x27;</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> e finalmente calculamos a quantidade de dias entre elas:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Calculo da quantidade de dias</span></span><br><span class="line">quantidade_dias = <span class="built_in">abs</span>((d2 - d1).days)</span><br></pre></td></tr></table></figure><p>Utilizamos a função <code>abs</code> para garantir que a quantidade de dias de diferença seja sempre positiva, independente da ordem em que as datas foram subtraídas.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Peewee - Um ORM Python minimalista</title>
      <link href="/2017/07/2017-04-14-peewee-um-orm-python-minimalista/"/>
      <url>/2017/07/2017-04-14-peewee-um-orm-python-minimalista/</url>
      
        <content type="html"><![CDATA[<p><a href="http://peewee.readthedocs.io/en/latest/index.html">Peewee</a> é um ORM destinado a criar e gerenciar tabelas de banco de dados relacionais através de objetos Python. Segundo a <a href="https://pt.wikipedia.org/wiki/Mapeamento_objeto-relacional">wikipedia</a>, um ORM é:</p><blockquote><p>Mapeamento objeto-relacional (ou ORM, do inglês: Object-relational mapping) é uma técnica de desenvolvimento &gt; utilizada para reduzir a impedância da programação orientada aos objetos utilizando bancos de dados relacionais. As tabelas do banco de dados são representadas através de classes e os registros de cada tabela são representados como instâncias das classes correspondentes.</p></blockquote><p>O que um ORM faz é, basicamente, transformar classes Python em tabelas no banco de dados, além de permitir construir <em>querys</em> usando diretamente objetos Python ao invés de SQL.</p><p>O Peewee é destinado a projetos de pequeno&#x2F;médio porte e se destaca pela simplicidade quando comparado a outros ORM mais conhecidos, como o SQLAlchemy. Uma analogia utilizada pelo autor da API e que acho muito interessante é que Peewee está para o SQLAlchemy assim como SQLite está para o PostgreSQL.</p><p>Em relação aos recursos por ele oferecidos, podemos citar que ele possui suporte nativo a SQLite, PostgreSQL e MySQL, embora seja necessário a instalação de <em>drivers</em> para utilizá-lo com PostgreSQL e MySQL e suporta tanto Python 2.6+ quanto Python 3.4+.</p><p>Neste tutorial, utilizaremos o SQLite, por sua simplicidade de uso e pelo Python possuir suporte nativo ao mesmo (usaremos o Python 3.5).</p><h2 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h2><p>O Peewee pode ser facilmente instalado com o gerenciador de pacotes <em>pip</em> (recomendo a instalação em um virtualenv):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install peewee</span><br></pre></td></tr></table></figure><h2 id="Criando-o-banco-de-dados"><a href="#Criando-o-banco-de-dados" class="headerlink" title="Criando o banco de dados"></a>Criando o banco de dados</h2><p>Para criar o banco de dados é bem simples. Inicialmente passamos o nome do nosso banco de dados (a extensão <code>*.db</code> indica um arquivo do SQLite).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> peewee</span><br><span class="line"></span><br><span class="line"><span class="comment"># Aqui criamos o banco de dados</span></span><br><span class="line">db = peewee.SqliteDatabase(<span class="string">&#x27;codigo_avulso.db&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Diferente de outros bancos de dados que funcionam através um servidor, o SQLite cria um arquivo de extensão <code>*.db</code>, onde todos os nossos dados são armazenados.</p><blockquote><p>   Caso deseje ver as tabelas existentes no arquivo <code>codigo_avulso.db</code>, instale o aplicativo <code>SQLiteBrowser</code>. Com ele fica fácil monitorar as tabelas criadas e acompanhar o tutorial.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sqlitebrowser</span><br></pre></td></tr></table></figure><p>A título de exemplo, vamos criar um banco destinado a armazenar nomes de livros e de seus respectivos autores. Iremos chamá-lo de <code>models.py</code>.</p><p>Inicialmente, vamos criar a classe base para todos os nossos <code>models</code>. Esta é uma abordagem recomendada pela documentação e é considerada uma boa prática. Também adicionaremos um log para acompanharmos as mudanças que são feitas no banco:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> peewee</span><br><span class="line"></span><br><span class="line"><span class="comment"># Criamos o banco de dados</span></span><br><span class="line">db = peewee.SqliteDatabase(<span class="string">&#x27;codigo_avulso.db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(peewee.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Classe model base&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># Indica em qual banco de dados a tabela</span></span><br><span class="line">        <span class="comment"># &#x27;author&#x27; sera criada (obrigatorio). Neste caso,</span></span><br><span class="line">        <span class="comment"># utilizamos o banco &#x27;codigo_avulso.db&#x27; criado anteriormente</span></span><br><span class="line">        database = db</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A class <code>BaseModel</code> é responsável por criar a conexão com nosso banco de dados.</p><p>Agora, vamos criar a model que representa os autores:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Classe que representa a tabela Author</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># A tabela possui apenas o campo &#x27;name&#x27;, que receberá o nome do autor sera unico</span></span><br><span class="line">    name = peewee.CharField(unique=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Se observamos a model <code>Author</code>, veremos que não foi especificado nenhuma coluna como <em>primary key</em> (chave primaria), sendo assim o Peewee irá criar um campo chamado <code>id</code> do tipo inteiro com auto incremento para funcionar como chave primária.<br>Em seguida, no mesmo arquivo <code>models.py</code> criamos a classe que representa os livros. Ela possui uma relação de “muitos para um” com a tabela de autores, ou seja, cada livro possui apenas um autor, mas um autor pode possuir vários livros.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Classe que representa a tabela Book</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># A tabela possui apenas o campo &#x27;title&#x27;, que receberá o nome do livro</span></span><br><span class="line">    title = peewee.CharField(unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Chave estrangeira para a tabela Author</span></span><br><span class="line">    author = peewee.ForeignKeyField(Author)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Agora, adicionamos o código que cria as tabelas <code>Author</code> e <code>Book</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Author.create_table()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Tabela &#x27;Author&#x27; criada com sucesso!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> peewee.OperationalError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Tabela &#x27;Author&#x27; ja existe!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Book.create_table()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Tabela &#x27;Book&#x27; criada com sucesso!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> peewee.OperationalError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Tabela &#x27;Book&#x27; ja existe!&quot;</span>)</span><br></pre></td></tr></table></figure><p>excerpt<br>Agora executamos o <code>models.py</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python models.py</span><br></pre></td></tr></table></figure><p>A estrutura do diretório ficou assim:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso.db</span><br><span class="line">├── models.py</span><br></pre></td></tr></table></figure><p>Após executarmos o código, será criado um arquivo de nome <code>codigo_avulso.db</code> no mesmo diretório do nosso arquivo <code>models.py</code>, contendo as tabelas <code>Author</code> e <code>Book</code>.</p><h2 id="Realizando-o-CRUD"><a href="#Realizando-o-CRUD" class="headerlink" title="Realizando o CRUD"></a>Realizando o CRUD</h2><p>Agora vamos seguir com as 4 principais operações que podemos realizar em um banco de dados, também conhecida como CRUD.</p><p>A sigla <code>CRUD</code> é comumente utilizada para designar as quatro operações básicas que pode-se executar em um banco de dados, sendo elas: </p><pre><code>- Create (criar um novo registro no banco)- Read (ler/consultar um registro)- Update (atualizar um registro)- Delete (excluir um registro do banco)</code></pre><p>Iremos abordar cada uma dessas operações.</p><h3 id="Create-Inserindo-dados-no-banco"><a href="#Create-Inserindo-dados-no-banco" class="headerlink" title="Create: Inserindo dados no banco"></a>Create: Inserindo dados no banco</h3><p>Agora, vamos popular nosso banco com alguns autores e seus respectivos livros. Para isso criamos um arquivo <code>create.py</code>. A estrutura do diretório ficou assim:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso.db</span><br><span class="line">├── models.py</span><br><span class="line">├── create.py</span><br></pre></td></tr></table></figure><p>A criação dos registros no banco pode ser feito através do método <code>create</code>, quando desejamos inserir um registro apenas; ou pelo método <code>insert_many</code>, quando desejamos inserir vários registros de uma vez em uma mesma tabela.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Author, Book</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inserimos um autor de nome &quot;H. G. Wells&quot; na tabela &#x27;Author&#x27;</span></span><br><span class="line">author_1 = Author.create(name=<span class="string">&#x27;H. G. Wells&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inserimos um autor de nome &quot;Julio Verne&quot; na tabela &#x27;Author&#x27;</span></span><br><span class="line">author_2 = Author.create(name=<span class="string">&#x27;Julio Verne&#x27;</span>)</span><br><span class="line"></span><br><span class="line">book_1 = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;A Máquina do Tempo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author_id&#x27;</span>: author_1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">book_2 = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Guerra dos Mundos&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author_id&#x27;</span>: author_1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">book_3 = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Volta ao Mundo em 80 Dias&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author_id&#x27;</span>: author_2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">book_4 = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Vinte Mil Leguas Submarinas&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author_id&#x27;</span>: author_1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">books = [book_1, book_2, book_3, book_4]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inserimos os quatro livros na tabela &#x27;Book&#x27;</span></span><br><span class="line">Book.insert_many(books).execute()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Read-Consultando-dados-no-banco"><a href="#Read-Consultando-dados-no-banco" class="headerlink" title="Read: Consultando dados no banco"></a>Read: Consultando dados no banco</h3><p>O Peewee possui comandos destinados a realizar consultas no banco. De maneira semelhante ao conhecido <code>SELECT</code>. Podemos fazer essa consulta de duas maneiras. Se desejamos o primeiro registro que corresponda a nossa pesquisa, podemos utilizar o método <code>get()</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Author, Book</span><br><span class="line"></span><br><span class="line">book = Book.get(Book.title == <span class="string">&quot;Volta ao Mundo em 80 Dias&quot;</span>).get()</span><br><span class="line"><span class="built_in">print</span>(book.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resultado</span></span><br><span class="line"><span class="comment"># * Volta ao Munto em 80 Dias</span></span><br></pre></td></tr></table></figure><p>Porém, se desejamos mais de um registro, utilizamos o método <code>select</code>. Por exemplo, para consultar todos os livros escritos pelo autor “H. G. Wells”.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read.py</span></span><br><span class="line"></span><br><span class="line">books = Book.select().join(Author).where(Author.name==<span class="string">&#x27;H. G. Wells&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exibe a quantidade de registros que corresponde a nossa pesquisa</span></span><br><span class="line"><span class="built_in">print</span>(books.count())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(book.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resultado:</span></span><br><span class="line"><span class="comment"># * A Máquina do Tempo</span></span><br><span class="line"><span class="comment"># * Guerra dos Mundos</span></span><br><span class="line"><span class="comment"># * Vinte Mil Leguas Submarinas</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Também podemos utilizar outras comandos do SQL como <code>limit</code> e <code>group</code> (para mais detalhes, ver a documentação <a href="http://peewee.readthedocs.io/en/latest/index.html">aqui</a>).</p><p>A estrutura do diretório ficou assim:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso.db</span><br><span class="line">├── models.py</span><br><span class="line">├── create.py</span><br><span class="line">├── read.py</span><br></pre></td></tr></table></figure><h3 id="Update-Alterando-dados-no-banco"><a href="#Update-Alterando-dados-no-banco" class="headerlink" title="Update: Alterando dados no banco"></a>Update: Alterando dados no banco</h3><p>Alterar dados também é bem simples. No exemplo anterior, se observarmos o resultado da consulta dos livros do autor “H. G. Wells”, iremos nos deparar com o livro de título “Vinte Mil Léguas Submarinas”. Se você, caro leitor, gosta de contos de ficção-científica, sabe que esta obra foi escrito por “Julio Verne”, coincidentemente um dos autores que também estão cadastrados em nosso banco. Sendo assim, vamos corrigir o autor do respectivo livro.</p><p>Primeiro vamos buscar o registro do autor e do livro:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Author, Book</span><br><span class="line"></span><br><span class="line">new_author = Author.get(Author.name == <span class="string">&#x27;Julio Verne&#x27;</span>)</span><br><span class="line">book = Book.get(Book.title==<span class="string">&quot;Vinte Mil Leguas Submarinas&quot;</span>)</span><br></pre></td></tr></table></figure><p>Agora vamos alterar o autor e gravar essa alteração no banco.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alteramos o autor do livro</span></span><br><span class="line">book.author = new_author</span><br><span class="line"></span><br><span class="line"><span class="comment"># Salvamos a alteração no banco</span></span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure><p>A estrutura do diretório ficou assim:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso.db</span><br><span class="line">├── models.py</span><br><span class="line">├── create.py</span><br><span class="line">├── read.py</span><br><span class="line">├── update.py</span><br></pre></td></tr></table></figure><h3 id="Delete-Deletando-dados-do-banco"><a href="#Delete-Deletando-dados-do-banco" class="headerlink" title="Delete: Deletando dados do banco"></a>Delete: Deletando dados do banco</h3><p>Assim como as operações anteriores, também podemos deletar registros do banco de maneira bem prática. Como exemplo, vamos deletar o livro “Guerra dos Mundos” do nosso banco de dados.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># delete.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Author, Book</span><br><span class="line"></span><br><span class="line"><span class="comment"># Buscamos o livro que desejamos excluir do banco</span></span><br><span class="line">book = Book.get(Book.title==<span class="string">&quot;Guerra dos Mundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Excluimos o livro do banco</span></span><br><span class="line">book.delete_instance()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Simples não?</p><p>A estrutura do diretório ficou assim:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso.db</span><br><span class="line">├── models.py</span><br><span class="line">├── create.py</span><br><span class="line">├── read.py</span><br><span class="line">├── update.py</span><br><span class="line">├── delete.py</span><br></pre></td></tr></table></figure><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>É isso pessoal. Este tutorial foi uma introdução bem enxuta sobre o Peewee. Ainda existem muitos tópicos que não abordei aqui, como a criação de <em>primary_key</em>, de campos <em>many2many</em> entre outros recursos, pois foge do escopo deste tutorial. Se você gostou do ORM, aconselho a dar uma olhada também na sua documentação, para conseguir extrair todo o potencial da ferramenta. A utilização de um ORM evita que o desenvolvedor perca tempo escrevendo <em>query</em> SQL e foque totalmente no desenvolvimento de código.</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul><li><a href="http://peewee.readthedocs.io/en/latest/index.html">Documentação do Peewee (em inglês)</a></li><li><a href="https://www.blog.pythonlibrary.org/2014/07/17/an-intro-to-peewee-another-python-orm/">An Intro to peewee – Another Python ORM</a></li><li><a href="http://jonathansoma.com/tutorials/webapps/intro-to-peewee/">Introduction to peewee</a></li><li><a href="https://www.novatec.com.br/livros/introducao-sql/">Introdução à Linguagem SQL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> banco de dados </tag>
            
            <tag> python </tag>
            
            <tag> orm </tag>
            
            <tag> peewee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Como realizar o checkout de um Pull Requests localmente</title>
      <link href="/2017/07/2017-07-27-git-realizando-o-checkout-de-pull-requests-localmente/"/>
      <url>/2017/07/2017-07-27-git-realizando-o-checkout-de-pull-requests-localmente/</url>
      
        <content type="html"><![CDATA[<h2 id="Motivacao"><a href="#Motivacao" class="headerlink" title="Motivação"></a>Motivação</h2><p>Uma situação muito comum quando mantemos um projeto  <em>opensource</em>, é que outros desenvolvedores façam um <em>fork</em> do nosso repositório e com o tempo submetam melhorias ou correções de <em>bugs</em> para nosso repositório através de um <em>Pull Request</em>.</p><p>Algumas vezes, torna-se interessante realizarmos um <em>checkout</em> do <em>Pull Request</em> localmente, em nossa máquina. Isso pode ser útil nas seguintes situações (tomando como base minha modesta experiência com projetos <em>opensource</em> ):</p><ul><li>Desejamos testar as novas funcionalidades presentes no <em>Pull Request</em>, ou em caso de correções de <em>bugs</em>, queremos validar se o mesmo foi corrigido.</li><li>O <em>Pull Request</em> precisa de algumas modificações, mas o desenvolvedor que o submeteu simplesmente desapareceu, não respondendo seus pedidos de correção. Porém, apesar das correções a serem feitas, o conteúdo do <em>Pull Request</em> é interessante o suficiente para que o mesmo não seja fechado.</li><li>O <em>fork</em> de onde veio o pedido de <em>Pull Request</em> foi excluído. Neste caso, o <em>merge</em> ainda pode ser realizado, porém se for necessário alguma correção no código submetido, a sistuação se complica, pois neste caso você não tem mais acesso ao <em>fork</em> do desenvolvedor que realizou  a submissão.</li></ul><p>Sendo assim, vamos aprender a resolver esses incovenientes com as ferramentas que o <em>git</em> nos oferece. Este tutorial foi testado com o Github, porém acredito que o mesmo processo possa ser realizado em outros serviços que suportam <em>git</em> como Gitlab, Bitbucket e etc.</p><p>Este tutorial exige um certo nível de conhecimento prévio com <em>git</em>. Como por exemplo, saber o conceito de <em>Pull Request</em>, <em>branch</em> e <em>push</em>. Qualquer dúvida, é só postar nos comentários. :)</p><h2 id="Realizando-o-checkout-de-um-Pull-Request"><a href="#Realizando-o-checkout-de-um-Pull-Request" class="headerlink" title="Realizando o checkout de um Pull Request"></a>Realizando o checkout de um <em>Pull Request</em></h2><p>O primeiro passo é descobrir o ID do <em>Pull Request</em>. Ele normalmente fica do lado direito do título, precedido pelo símbolo <code>#</code>.</p><p><img src="/images/mstuttgart/snapshot_48.png"></p><p>Na imagem de exemplo, logo acima, podemos observar que o ID do <em>Pull request</em> é <code>39</code>. De posse dessa informação, vamos então realizar uma cópia local do <em>Pull Request</em>. Isso pode ser feito com o seguinte comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin pull/ID/head:NOMEBRANCH</span><br></pre></td></tr></table></figure><p>Onde:</p><ul><li>ID: ID do Pull Request;</li><li>NOMEBRANCH: é um nome qualquer definido para a <em>branch</em> que será criada.</li></ul><p>Uma vez que o comando tenha sido executado, veremos uma mensagem semelhante a esta:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From github.com:author/nome_repositorio</span><br><span class="line"> * [new ref] refs/pull/39/head -&gt; NOMEBRANCH</span><br></pre></td></tr></table></figure><p>Se executarmos o comando <code>git branch</code>, veremos a <em>branch</em> recém-criada listada entre as outras <em>branchs</em>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  NOMEBRANCH</span><br></pre></td></tr></table></figure><p>Agora, basta trocar para a nova <em>branch</em> com</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout NOMEBRANCH</span><br></pre></td></tr></table></figure><p>e realizar os testes.</p><p>No caso em que desejamos inserir modificações no conteúdo do <em>Pull Request</em>, nós realizamos os seguintes passos:</p><ul><li>Realizamos as modifições desejadas;</li><li>Executamos o <em>commit</em> e o <em>push</em> da nova <em>branch</em>;</li><li>Finalmente, criamos um novo <em>Pull Request</em> com essa mesma <em>branch</em> recém-criada.</li></ul><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Bom, chegamos ao fim de mais um tutorial. Tentei apresentar de maneira objetiva os procedimento que utilizo quando me deparo com algumas das situações descritas no início do tutorial, sendo assim tive de ser mais direto nas explicações. Então caso tenha ficado alguma dúvida, é só postar nos comentários.</p><p>É isso pessoal. Até o próximo tutorial.</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul><li><a href="https://help.github.com/articles/checking-out-pull-requests-locally">https://help.github.com/articles/checking-out-pull-requests-locally</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consulta de CEP com PyCEPCorreios</title>
      <link href="/2017/06/2016-07-31-consultando-cep-com-pycep-correios/"/>
      <url>/2017/06/2016-07-31-consultando-cep-com-pycep-correios/</url>
      
        <content type="html"><![CDATA[<p>Boa tarde, pessoal. Tudo certo?</p><p>Atualização do <em>post</em> antigo. Neste <em>post</em> irei falar um pouco sobre a nova versão da <a href="https://github.com/mstuttgart/pycep-correios">PyCEP Correios</a>.</p><p>O <a href="https://github.com/mstuttgart/pycep-correios">PyCEPCorreios</a> é uma api desenvolvida em Python que realiza a busca dos dados de um dado CEP diretamente no <em>webservice</em> dos Correios, sendo essa a principal diferença em relação a outras api’s de consulta de CEP. O retorno dessa consulta é um <em>dict</em> contendo os dados do endereço pertencente ao CEP. Este projeto foi iniciado por mim para fins de estudo, porém ele pode ser utilizado normalmente em projetos mais sérios.</p><p><strong>UPDATE:</strong> A versão <em>2.0.0</em> trouxe melhorias consideráveis no código com o objetivo de tornar a API mais<br>fácil de ser utilizada. Porém, ela é incompatível com as versões anteriores. Houve<br>grandes melhorias na documentação, código e testes da API. Sendo assim,<br>decidi republicar esse <em>post</em> com novas informações sobre a lib.</p><p><strong>UPDATE:</strong> A versão <em>2.1.0</em> trouxe suporte para python 2.7+</p><h3 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h3><p>O PyCEP Correios pode ser facilmente instalado com o comando a seguir:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycep-correios</span><br></pre></td></tr></table></figure><p><strong>UPDATE</strong>: Atualmente, a PyCEPCorreios possui suporte para Python 2.7+ e 3.3+.</p><h3 id="Como-usar"><a href="#Como-usar" class="headerlink" title="Como usar"></a>Como usar</h3><p>Consultar o endereço de um CEP é muito simples com a <a href="https://github.com/mstuttgart/pycep-correios">PyCEPCorreios</a>. Não importa se o CEP fornecido possui hífen ou ponto. A <a href="https://github.com/mstuttgart/pycep-correios">PyCEPCorreios</a> trata a entrada garantindo uma entrada válida para o <em>webservice</em> dos Correios.</p><p>Veja os exemplos a seguir:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pycep_correios</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>endereco = pycep_correios.consultar_cep(<span class="string">&#x27;37503130&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(endereco)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;bairro&#x27;</span>: <span class="string">&#x27;Santo Antônio&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cep&#x27;</span>: <span class="string">&#x27;37503130&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cidade&#x27;</span>: <span class="string">&#x27;Itajubá&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;end&#x27;</span>: <span class="string">&#x27;Rua Geraldino Campista&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uf&#x27;</span>: <span class="string">&#x27;MG&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;complemento&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;complemento2&#x27;</span>: <span class="string">&#x27;- até 214/215&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Um exemplo alternativo, enviamos um CEP incorreto, com a quantidade de dígitos inferior a 8.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycep_correios</span><br><span class="line"><span class="keyword">from</span> pycep_correios.excecao <span class="keyword">import</span> CEPInvalido</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    endereco = pycep_correios.consultar_cep(<span class="string">&#x27;00000000&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> CEPInvalido <span class="keyword">as</span> exc:</span><br><span class="line">    <span class="built_in">print</span>(exc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Para outras exceções devemos utilizar as exceções da biblioteca <em>requests</em>, no qual a<br>PyCEPCorreios faz uso para comunicação com o <em>webservice</em>. As antigas exceções da biblioteca também foram removidas a fim de evitar redundância com as exceções da <em>requests</em> e toda a API agora possui comandos e documentação em postuguês.</p><p>A PyCEPCorreios também possui funções para validar e formatar números de CEP. Para mais exemplos, veja a documentação <a href="https://pycep-correios.readthedocs.io/pt/latest/usage.html">aqui</a>. Abaixo, segue alguns <em>links</em> úteis.</p><ul><li>Repositório: <a href="https://github.com/mstuttgart/pycep-correios">https://github.com/mstuttgart/pycep-correios</a></li><li>PyPi: <a href="https://pypi.python.org/pypi/pycep-correios">https://pypi.python.org/pypi/pycep-correios</a></li><li>Documentação: <a href="https://pycep-correios.readthedocs.io/pt/latest/">https://pycep-correios.readthedocs.io/pt/latest/</a></li></ul><p>Se deseja contribuir, por favor dê uma olhada na documentação <a href="https://pycep-correios.readthedocs.io/pt/latest/contributing.html">aqui</a>. Contribuições são sempre bem-vindas.</p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>É isso pessoal. Este <em>post</em> foi feito simplesmente para apresentação da <a href="https://github.com/mstuttgart/pycep-correios">PyCEP Correios</a> e mostrar exemplos<br>de utilização da versão <em>2.0.0</em> da API. Espero que o módulo seja útil a vocês. Se alguém possuir alguma crítica ou sugestão sinta-se livre para comentar.</p><p>Obrigado por ler até aqui! Até o próximo <em>post</em>.</p>]]></content>
      
      
      <categories>
          
          <category> Meus Projetos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> projeto </tag>
            
            <tag> python </tag>
            
            <tag> correios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Separar históricos de subdiretórios com Git</title>
      <link href="/2017/05/2016-05-26-como-clonar-um-subdiretorio-com-git/"/>
      <url>/2017/05/2016-05-26-como-clonar-um-subdiretorio-com-git/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo tranquilo?</p><p>Meu caro leitor(a), você já passou por uma situação onde precisava transferir um diretório de um repositório para outro, sem perder o histórico de contribuições referentes a esse diretório?</p><p>Semanas atrás me deparei com esse desafio e achei interessante compatilhar com você a solução que encontrei.</p><h3 id="Analisando-o-problema"><a href="#Analisando-o-problema" class="headerlink" title="Analisando o problema"></a>Analisando o problema</h3><p>Na situação descrita acima, a <em>priori</em>, temos duas possíveis soluções:</p><ol><li>Criar um novo repositório e copiar o diretório desejado do antigo repositório para o novo.</li><li>Clonar o repositório original, e no repositório clonado remover todos os outros diretórios e arquivos, deixando apenas diretório desejado.</li></ol><p>As duas opções resolvem nosso problema, porém ambas possuem alguns incovenientes.</p><ul><li>Na <em>opção 1</em>, o histórico de <em>commits</em> do antigo repositório não é mantido, já que apenas o diretório é copiado. Desse modo, perdemos a lista de colaborações feitas por outros desenvolvedores, algo muito ruim.</li><li>Na <em>opção 2</em>, o histórico de <em>commits</em> do antigo repositório é mantido, porém ele traz <em>commits</em> de alterações de outras partes do projeto, o que não é interessante uma vez que desejamos separá-lo do seu antigo projeto.</li></ul><p>Não seria interessante que o histórico fosse mantido, porém apenas com os <em>commits</em> que dizem respeito ao diretório que desejamos separar do repositório original?</p><p>Felizmente, o git nos fornece ferramentas que tornam isso possível.</p><h3 id="Resolvendo-o-problema"><a href="#Resolvendo-o-problema" class="headerlink" title="Resolvendo o problema"></a>Resolvendo o problema</h3><p>Para começar, vamos supor que temos dois repositórios: <em>repo_novo</em>, atualmente vazio e <em>repo_antigo</em>. O <em>repo_antigo</em> possui um diretório chamado <em>dirA</em>. Como exemplo, vamos transferir o <em>dirA</em> do repositório <em>repo_antigo</em> para o repositório <em>repo_novo</em>, sem perder seu histórico de <em>commits</em>.</p><p>Incialmente, vamos fazer o clone do <em>repo_antigo</em>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nomeusuario/repo_antigo.git</span><br></pre></td></tr></table></figure><p>Entre dentro da pasta recém-clonada:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> repo_antigo/</span><br></pre></td></tr></table></figure><p>Agora vamos executar o seguinte comando:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --subdirectory-filter dirA -f</span><br></pre></td></tr></table></figure><p>O comando acima aplica um filtro para subdiretórios (–subdirectory-filter) usando como referência o subdiretório que passamos como parâmetro (dirA) e analisando todo os histórico de <em>commits</em> procurando por <em>commits</em> relacionados a ele, do início do histórico até o <em>commit</em> mais atual (HEAD).</p><p>Após executar o comando, verifique o conteúdo da pasta <em>repo_antigo</em>. Agora os únicos arquivos e diretórios presentes são os que estavam dentro do diretório <em>dirA</em>. O próximo passo é jogar tudo novamente dentro de um diretorio de nome <em>dirA</em>. Fazemos isso com o comando:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --tree-filter &#x27;mkdir -v dirA; git mv -k * dirA&#x27; HEAD</span><br></pre></td></tr></table></figure><p>Se usarmos o comando <code>git log</code>, veremos que apenas os <em>commits</em> relacionados ao conteúdo de <em>dirA</em> permaneceram no histórico. Vale lembrar aqui que os outros <em>commits</em> não foram removidos do repositório remoto original, o histórico foi filtrado apenas localmente.</p><p>O próximo passo agora é subir tudo isso para o <em>novo_repo</em>. Para isso, precisamos primeiro substituir a url do <em>repo_antigo</em> pela url do nosso <em>repo_novo</em> e em seguida realizar o <em>push</em>. Vale lembrar que se seu <em>repo_novo</em> já possuir algum <em>commit</em> (normalmente adicionando um arquivo README.md e um arquivo LICENSE) será necessário execura um <code>git pull</code> antes do <em>push</em> ou sobreescrever o commit inicial do novo repositório usando <code>git push -f</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/usuario/novo_repo.git</span><br><span class="line">git fetch origin</span><br><span class="line">git push -f origin nomedabranch</span><br></pre></td></tr></table></figure><p>Neste caso em especial, eu apenas copiei o conteúdo do diretório <em>dirA</em> em um repositório diferente. Entretanto, a principal utilidade desse método é quando desejamos transferir o diretório para um novo repositório, sendo o mesmo posteriormente removido do repositório antigo. Porque assim, todas as novas colaborações para o conteúdo de <em>dirA</em> devem, a partir de agora, enviadas para o <em>novo_repo</em>.</p><p>Apenas para complementar o <em>post</em>. Eu fiz uso deste método recentemente, em um dos projetos que contribuo. O repositório <a href="https://github.com/daylerees/colour-schemes">colour-schemes</a> possui temas de vários editores usados em desenvolvimento (Sublime Text, Atom, Kate e etc), tendo cada um seu respectivo diretório com seus temas.</p><p>Sou usuário da IDE <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>, então fiz alguns ajustes nos temas do diretório <em>jetbrains</em> (empresa dona do <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>) presentes nesse repositório. Foram 55 temas ajustados (me custou algumas horas de trabalho haha) mas o resultado foi muito satisfatório. Após terminar os ajustes, enviei um <em>pull request</em> para o repositório original. Porém o que me frustrou, foi o fato dos responsáveis pelo repositório demorarem muito tempo (muito mesmo) para revisar e aprovar os <em>pull requests</em>. Sendo assim, decidi criar um repositório contendo apenas os temas do <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> já com minhas alterações, de modo que outros desenvolvedores pudessem usá-los. Então utilizei o método acima, clonei o meu fork do repositório original (que possuia os minhas modificações) e executei o filtro apenas para o diretório <em>jetbrains</em>. Em seguida enviei para <a href="https://github.com/mstuttgart/pycharm-colour-scheme">este meu repositório</a>. Compare o conteúdo com o repositório original <a href="https://github.com/daylerees/colour-schemes/tree/master/jetbrains">aqui</a>.</p><p>É isso pessoal. Espero que a dica seja útil para vocês. Qualquer dúvida é só postar nos comentários.</p><p>Até o próximo tutorial.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> dica </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aprenda a tranformar strings em objetos com literal_eval e Python</title>
      <link href="/2017/03/2017-03-29-literal-eval-como-transformar-strings-em-objetos-python/"/>
      <url>/2017/03/2017-03-29-literal-eval-como-transformar-strings-em-objetos-python/</url>
      
        <content type="html"><![CDATA[<p>O comando <em>literal_eval</em> é um interessante comando da biblioteca Python <a href="https://docs.python.org/2/library/ast.html">ast- <em>Abstract Syntax Trees</em></a>. Ele avalia uma <em>string</em> contendo uma expressão Python e a executa.</p><h2 id="Exemplos"><a href="#Exemplos" class="headerlink" title="Exemplos"></a>Exemplos</h2><p>Executando a <em>string</em> ‘True’ como o valor booleano <code>True</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">valor = ast.literal_eval(<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(valor) <span class="comment"># saida: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(valor)) <span class="comment"># saída: &lt;type &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>Ou convertendo uma <em>string</em> contendo uma lista em um objeto <em>list</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">valor = ast.literal_eval(<span class="string">&#x27;[1, 2, 3]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(valor) <span class="comment"># saída: [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(valor)) <span class="comment"># saída: &lt;type &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>Podemos também utilizá-lo para gerar um dicionário a partir de uma <em>string</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">valor = ast.literal_eval(<span class="string">&quot;&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 1, &#x27;c&#x27;: 42&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(valor) <span class="comment"># saída: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 1, &#x27;c&#x27;: 42&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(valor)) <span class="comment"># saída: &lt;type &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Diferencas-entre-‘eval’-e-‘literal-eval’"><a href="#Diferencas-entre-‘eval’-e-‘literal-eval’" class="headerlink" title="Diferenças entre ‘eval’ e ‘literal_eval’"></a>Diferenças entre ‘eval’ e ‘literal_eval’</h2><p>O <code>literal_eval</code> funciona de maneira semelhante ao conhecido comando <code>eval</code>, porém aceita apenas um pequeno conjunto de estruturas Python: <em>strings</em>, números, dicionários, listas, tupla, valores booleanos(<em>True</em> ou <em>False</em>) ou <code>None</code>. A partir da versão <em>3.2</em>, ele também passou a aceitar <em>bytes</em> e <em>set</em>.</p><p>O comando <code>eval</code> é mais poderoso, porém pode ser um problema se você não tem controle das <em>strings</em> fornecidas a ele. Se executarmos o seguinte comando <code>eval(&#39;rm -rf /&#39;)</code> em um sistema Linux (por favor, <strong>NÃO</strong> executem esse comando), todos os arquivos a partir da <em>raiz</em> do sistema operacional serão deletados. Entretanto, se passarmos a mesma <em>string</em> à instrução <code>literal_eval</code>, ela realizará uma validação de segurança na instrução antes de executá-la, lançando uma exceção do tipo <code>ValueError</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ast.literal_eval(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;rm -rf /&#x27;)&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.5/ast.py&quot;</span>, line <span class="number">84</span>, <span class="keyword">in</span> literal_eval</span><br><span class="line">    <span class="keyword">return</span> _convert(node_or_string)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.5/ast.py&quot;</span>, line <span class="number">83</span>, <span class="keyword">in</span> _convert</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;malformed node or string: &#x27;</span> + <span class="built_in">repr</span>(node))</span><br><span class="line">ValueError: malformed node <span class="keyword">or</span> string: &lt;_ast.Call <span class="built_in">object</span> at <span class="number">0x7f120ed568d0</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Apesar das limitação de tipo de estruturas aceitas pelo <code>literal_eval</code> (não que isso seja um problema), é aconselhável fazer uso do <code>literal_eval</code> ao invés do <code>eval</code>, pois o validação que a função realiza antes de executar a instrução pode nos evitar muita dor de cabeça (como exemplificado no exemplo acima) ao mesmo tempo que nos dá um controle maior sobre o código, pois sabemos os tipos de estruturas que o comando aceita como parâmetro.</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul><li>Documentação (em inglês): <a href="https://docs.python.org/3/library/ast.html">https://docs.python.org/3/library/ast.html</a></li><li>Um pouco mais da comparação entre os dois comandos (em inglês): <a href="http://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval">http://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> literal_eval </tag>
            
            <tag> eval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Duplicando banco de dados no PostgreSQL</title>
      <link href="/2017/03/2017-03-05-duplicando-base-de-dados-no-postgresql/"/>
      <url>/2017/03/2017-03-05-duplicando-base-de-dados-no-postgresql/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo bem?</p><p>No outro tutorial sobre PostgreSQL (<a href="backup-e-restore-de-um-banco-de-dados-postgresql.html">link aqui</a>), nós aprendemos a realizar o <em>backup</em> e <em>restore</em> de um banco de dados com PostgreSQL. Neste tutorial, veremos como duplicar um banco de dados já existente.</p><p>Inicialmente, pecisamos trocar para o usuário <code>postgres</code>. Isso pode ser feito através do comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres</span><br></pre></td></tr></table></figure><p>Uma vez como usuário <code>postgres</code>, podemos listar todos os bancos existentes com o comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -l</span><br></pre></td></tr></table></figure><p>A título de exemplo, vamos supor que temos um banco de dados chamado <code>codigo_avulso</code> e queremos duplicá-lo, criando um novo banco de dados chamado <code>codigo_avulso_copia</code>.</p><p>Antes de presseguir, é aconselhável encerrar qualquer aplicação ou serviço que esteja fazendo uso do banco de dados a ser duplicado. Feito isso, basta executar o comando a seguir:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb <span class="comment">--template=codigo_avulso --owner=postgres codigo_avulso_copia</span></span><br></pre></td></tr></table></figure><p>No comando acima, temos o parâmetro <em>template</em>, que indica o nome do banco de dados original. Sempre que criamos um novo banco de dados no PostgreSQL, um <em>template</em> é utilizado. Se esse parâmetro não for passado para o comando <code>createdb</code>, um novo banco de dados vazio será criado utilizando um <em>template</em> pré-definido chamado <code>template1</code>.</p><p>O parâmetro <em>owner</em> indica o usuário <code>postgres</code> (não confundir com usuário linux do PostgreSQL) dono do banco de dados que será criado. Se nenhum <em>owner</em> for especificado, o novo banco de dados será atribuído ao <em>owner</em> <code>postgres</code>.</p><p>O parâmetro <em>owner</em> é muito útil quando alguma aplicação utiliza um usuário diferente de <em>postgres</em>. Utilizando o parâmetro <em>owner</em> com o nome do usuário do banco utilizado pela aplicação, não teremos erros de permissão quando a aplicação for acessar o novo banco de dados.</p><p>Agora, se executarmos novamente o comando <code>psql -l</code>, veremos o banco de dados original e o novo banco recém-criado.</p><p>É isso pessoal! Até o próximo <em>post</em>.</p>]]></content>
      
      
      <categories>
          
          <category> Banco de Dados </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> banco de dados </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MkDocs - Documentação de Projetos com Markdown</title>
      <link href="/2017/01/2017-01-22-mkdocs-documentacao-de-projetos-com-markdown/"/>
      <url>/2017/01/2017-01-22-mkdocs-documentacao-de-projetos-com-markdown/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo certo?</p><p>O <em>post</em> de hoje é sobre uma ferramenta que descobri algum tempo atrás e que achei bacana compartilhar. Neste <em>post</em> vamos estudar a criação de um site para a documentação de nossos projetos utilizando a ferramenta <em>MkDocs</em>.</p><p>O <em>MkDocs</em> é um gerador de site estático minimalista e muito simples de usar. Ele funciona de maneira semelhante a outros geradores como <em>Pelican</em> e <em>Jenkill</em>, entretanto, diferente desses, o <em>MkDocs</em> é voltado à criação de documentação ao invés de blogs.</p><p>Os sites contruídos com o <em>MkDocs</em> podem ser hospedados facilmente em muitos lugares, inclusive utilizando o <em>github pages</em>.</p><h2 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h2><p>O <em>MKDocs</em> possui suporte para as versões 2.7+ e 3.3+ do Python. A sua instalação é semelhante a outros pacotes Python.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mkdocs</span><br></pre></td></tr></table></figure><p>Podemos utilizar o seguinte comando para verificar se tudo foi instalado corretamente:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdocs --version</span><br></pre></td></tr></table></figure><p>Se tudo estiver funcionado corretamente, o resultado do comando será a versão do <em>MkDocs</em> instalado.</p><h3 id="Criando-o-Projeto"><a href="#Criando-o-Projeto" class="headerlink" title="Criando o Projeto"></a>Criando o Projeto</h3><p>A utilização do <em>MkDocs</em> é bem simples. Inicialmente criamos o nosso projeto com:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdocs new my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p>Dentro da pasta <em>my-projet</em> teremos a seguinte estrutura de diretórios:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── docs</span><br><span class="line">│   └── index.md</span><br><span class="line">└── mkdocs.yml</span><br></pre></td></tr></table></figure><p>Todas as páginas do seu site serão armazenadas dentro da pasta <em>docs</em>. Inclusive dentro dessa mesma pasta existe o arquivo <em>index.md</em>. Este arquivo será a página principal do site. Além do diretório <em>docs</em>, também temos o arquivo <em>mkdocs.yml</em>, que é o arquivo de configuração utilizado pelo <em>MkDocs</em>.</p><h3 id="Servidor-de-Desenvolvimento"><a href="#Servidor-de-Desenvolvimento" class="headerlink" title="Servidor de Desenvolvimento"></a>Servidor de Desenvolvimento</h3><p>O <em>MkDocs</em> possui um servidor de desenvolvimento, que nos permite pré-visualizar nossa documentação. Para utilizar entre com o comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdocs serve</span><br></pre></td></tr></table></figure><p>Veremos algo semelhante em nosso terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO    -  Building documentation...</span><br><span class="line">INFO    -  Cleaning site directory</span><br><span class="line">[I 170125 15:05:33 server:283] Serving on http://127.0.0.1:8000</span><br><span class="line">[I 170125 15:05:33 handlers:60] Start watching changes</span><br><span class="line">[I 170125 15:05:33 handlers:62] Start detecting changes</span><br></pre></td></tr></table></figure><p>Um ponto interessante deste servidor de desenvolvimento é que ele atualiza automaticamente o conteúdo exibido na página sem necessidade de reiniciá-lo. Sendo necessário apenas atualizar a página do navegador.<br>Uma vez que o servidor esteja sendo executado, podemos acessar o site de documentação no navegador pelo seguinte endereço: <em><a href="http://localhost:8000/">http://localhost:8000/</a></em> ou <em><a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a></em></p><p><img src="/images/mstuttgart/snapshot_46.png"></p><h3 id="Adicionado-Novas-Paginas"><a href="#Adicionado-Novas-Paginas" class="headerlink" title="Adicionado Novas Páginas"></a>Adicionado Novas Páginas</h3><p>A página da imagem acima é o conteúdo do <em>index.md</em>. Podemos adicionar outra página facilmente editando a tag <code>pages</code> presente no arquivo <em>mkdocs.yml</em>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site_name:</span> <span class="string">My</span> <span class="string">Docs</span></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">About:</span> <span class="string">about.md</span></span><br></pre></td></tr></table></figure><p>Em seguida, criamos um arquivo <code>about.md</code> dentro da pasta <code>docs</code> e atualizamos a página no navegador para que o menu aparecera no topo do site, nos permitindo navegar entre as páginas.</p><p><img src="/images/mstuttgart/snapshot_47.png"></p><h3 id="Outras-Configuracoes"><a href="#Outras-Configuracoes" class="headerlink" title="Outras Configurações"></a>Outras Configurações</h3><p>Para trocarmos o nome do site, basta alterarmos o nome presente na tag <code>site_name</code>. Também podemos trocar o tema do site através da tag <code>theme</code>. O <em>MkDocs</em> vem com alguns temas próprios, que são os temas <code>mkdocs</code> (utilizado neste tutorial) e o <code>readthedocs</code> (utilizado muito em documentação de api Python). Também existem temas feitos por terceiros, que podem ser encontrados <a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes">aqui</a>. Para utilizá-los siga as instruções de instalação de cada tema.</p><h3 id="Compilando"><a href="#Compilando" class="headerlink" title="Compilando"></a>Compilando</h3><p>Quando o site de documentação estiver pronto, o próximo passo é compilá-lo. Isso é feito através do comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdocs build</span><br></pre></td></tr></table></figure><p>Um diretório chamato <code>site</code> será criado.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">about</span><br><span class="line">css</span><br><span class="line">fonts</span><br><span class="line">img</span><br><span class="line">js</span><br><span class="line">mkdocs</span><br><span class="line">404.html</span><br><span class="line">index.html</span><br><span class="line">sitemap.xml</span><br></pre></td></tr></table></figure><p>O conteúdo deste diretório é o nosso site em si, pronto para ser hospedado no <em>github-pages</em> (o seu conteúdo pode ser lançado na <em>branch</em> <code>gh-pages</code>) ou em outro servidor, de acordo com a preferência.</p><p>O <em>MkDocs</em> possui um comando onde ele compila o site e já o envia para o <em>github-pages</em>. Para mais informações, dê uma olhada na documentação (em inglês) <a href="http://www.mkdocs.org/user-guide/deploying-your-docs/">aqui</a>.</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Chegamos ao fim de mais um tutorial. Este foi bem curto, apenas para apresentar o <em>mkdocs</em>. Futuramente, pretendo fazer outro tutorial explicando como realizar o deploy no <em>github-pages</em> e inclusive, como automatizar esse processo.</p><p>Eu recentemente utilizei o <em>MkDocs</em> no site&#x2F;documentação do meu leitor de quadrinhos <em>Pynocchio</em> <a href="https://pynocchio.github.io/">aqui</a>.</p><p>É isso pessoal! Obrigado por ler até aqui. Até o próximo <em>post</em>!</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul><li><a href="http://www.mkdocs.org/">Documentação MKDocs (inglês)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mkdocs </tag>
            
            <tag> documentação </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python: Abrangência de Listas e Dicionários</title>
      <link href="/2017/01/2017-01-09-abrangencia-de-listas-e-dicts/"/>
      <url>/2017/01/2017-01-09-abrangencia-de-listas-e-dicts/</url>
      
        <content type="html"><![CDATA[<p>A utilização de listas em Python é algo trivial. A facilidade provida pela linguagem aliada a simplicidade da estrutura de dados <em>list</em> a torna, ao lado dos dicionários <em>dict</em>, uma das estrutura de dados mais utilizadas em Python. Aqui neste tutorial irei compartilhar algo que aprendi trabalhando com listas e dicionário em Python, mais especificamente no que diz respeito a <em>abrangência</em> de listas (e dicionários).</p><h2 id="Abrangencia-de-listas"><a href="#Abrangencia-de-listas" class="headerlink" title="Abrangência de listas"></a>Abrangência de listas</h2><p>A abrangência de listas, ou do inglês <em>list comprehensions</em>, é um  termo utilizado para descrever uma sintaxe compacta que o Python nos oferece para criamos uma lista baseada em outra lista. Pareceu confuso? Ok, vamos aos exemplos!</p><h3 id="Exemplo-1"><a href="#Exemplo-1" class="headerlink" title="Exemplo 1"></a>Exemplo 1</h3><p>Vamos supor que temos a seguinte lista de valores:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valores = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>Queremos gerar uma outra lista contendo o dobro de cada um desses números, ou seja,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>Inicialmente, podemos montar o seguinte código como solução:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Recebe o nosso resultado</span></span><br><span class="line">valores_dobro = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> valores:</span><br><span class="line">    valores_dobro.append(val * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(valores_dobro)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A solução acima é uma solução simples e resolve nosso problema, entretanto para algo tão simples precisamos de 4 linhas de código. Este exemplo é uma situação onde a <em>abrangência de lista</em> pode ser útil. Podemos compactar a criação da lista <code>valores_dobro</code> da seguinte maneira:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valores_dobro = [valor*<span class="number">2</span> <span class="keyword">for</span> valor <span class="keyword">in</span> valores]</span><br></pre></td></tr></table></figure><p>Bacana não? O exemplo seguinte podemos incrementar mais o exemplo acima.</p><h3 id="Exemplo-2"><a href="#Exemplo-2" class="headerlink" title="Exemplo 2"></a>Exemplo 2</h3><p>Vamos supor que desejamos criar uma lista onde apenas os valores pares (resto da divisão por 2 é zero) serão multiplicados por 2. Abaixo temos a nossa lista de valores:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valores = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>Assim como no exemplo anterior, podemos resolver utilizando um algoritmo básico.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lista que recebera o nosso resultado</span></span><br><span class="line">valores_dobro = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> valor <span class="keyword">in</span> valores:</span><br><span class="line">    <span class="keyword">if</span> valor % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        valores_dobro.append(valor * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(valores_dobro)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Podemos também resolver o mesmo problema utilizando as funções nativas <em>map</em> e <em>filter</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valores_dobro = <span class="built_in">map</span>(<span class="keyword">lambda</span> valor: valor * <span class="number">2</span>, <span class="built_in">filter</span>(<span class="keyword">lambda</span> valor: valor % <span class="number">2</span> == <span class="number">0</span>, valores))</span><br></pre></td></tr></table></figure><p>Muito mais complicada não é? Apesar de resolver nosso problema, expressões como a acima são difíceis de ler e até mesmo de escrever. Em casos como esse, podemos novamente compactar nosso algoritmo utilizando a <em>abrangência de lista</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valores_dobro = [valor * <span class="number">2</span> <span class="keyword">for</span> valor <span class="keyword">in</span> valores <span class="keyword">if</span> valor % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>Muito mais simples, não? Vamos para o próximo exemplo.</p><h3 id="Exemplo-3"><a href="#Exemplo-3" class="headerlink" title="Exemplo 3"></a>Exemplo 3</h3><p>De maneira semelhante a lista, nós também podemos aplicar a abrangência em lista e dicionários. Segue um exemplo onde temos o seguinte dicionário:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dicionario = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>Vamos criar um segundo dicionário contendo apenas as chaves que são consoantes, ou seja, <code>b</code>, <code>c</code>, <code>d</code> e <code>f</code>, sendo que o valor para cada uma dessas chaves deve ser o dobro do valor armazenado na respectiva chave do dicionário original. Complicado? Em outras palavras, o novo dicionário deve ficar assim:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">novo_dicionario = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><p>Utilizando um algoritmo genérico, podemos reslo o problema da seguinte maneira:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">novo_dicionario = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chave, valor <span class="keyword">in</span> dicionario:</span><br><span class="line">    <span class="keyword">if</span> chave <span class="keyword">in</span> [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">        novo_dicionario[chave] = <span class="number">2</span> * valor</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(novo_dicionario)</span><br><span class="line"></span><br><span class="line">&gt;&gt;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">12</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Aplicando agora a abrangência, conseguimos compactar o código acima de maneira interessante:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">novo_dicionario = &#123;chave: <span class="number">2</span> * valor <span class="keyword">for</span> chave, valor <span class="keyword">in</span> dicionario.items() <span class="keyword">if</span> chave <span class="keyword">in</span> [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Chegamos ao final de mais um tutorial! Sempre temos de ter em mente que tão importante quanto escrever um código que funciona, é mantê-lo (seja por você ou por outro programador). Neste ponto, a abrangência de lista (e outras estruturas de dados) nos ajudam a escrever um código claro e fácil de dar manutenção.</p><p>Até o próximo tutorial pessoal!</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul><li><a href="https://novatec.com.br/livros/python-eficaz/">Python eficaz: 59 maneiras de programar melhor em Python; Slatkin, Brett; Novatec Editora, 2016.</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personalize o seu terminal com ZSH + Prezto</title>
      <link href="/2016/09/2016-08-30-terminal-zsh-com-prezto/"/>
      <url>/2016/09/2016-08-30-terminal-zsh-com-prezto/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo bem?</p><p>As últimas semanas foram de muita correria pra mim (pretendo falar sobre isso em futura postagem) e por isso faz tempo que não publico algo no blog. Mas hoje, venho quebrar esse jejum de postagens como uma ferramenta que faz parte do meu dia-a-dia de desenvolvedor e sempre se mostra indispensável. Sim, estamos falado do terminal!</p><p>O <em>shell</em> padrão das distribuições é o <code>bash</code>. Entretanto existem outras opções, entre os quais eu cito o <code>zsh</code>, um <em>sheel</em> que após você começar, não vai conseguir mais deixar de usá-lo.</p><p>O <code>zsh</code> traz consigo uma grande quantidade de recursos que não estão presentes no <code>bash</code>, e são eles:</p><ul><li><em>autocomplete</em> para os comandos digitados;</li><li>correção do comando com erros de digitação;</li><li>exibição de uma listagem de diretórios e arquivos de acordo com as letras digitidas no <em>prompt</em>;</li><li>histórico de comandos compartilhado por todos os terminais;</li><li>possibilidade de extender e adicionar novas funcionalidades e temas e <em>plugins</em>.</li></ul><p>Neste <em>post</em> vamos explorar mais os recursos do <code>zsh</code> e adicionar novas funcionalidades ao mesmo através do <em>framework</em> <code>prezto</code>.</p><h2 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h2><p>Primeiramente, vamos instalar o <code>zsh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>Para usufruir de mais recursos, pode utilizar o <em>framework</em> <a href="https://github.com/sorin-ionescu/prezto">prezto</a>. Ele possui alguns <em>plugins</em> que aumentam a produtividade do <code>zsh</code>. Para instalá-lo, precisamos primeiramente ter o <code>git</code> instalado.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>Agora realizamos o <em>clone</em> do repositório do <code>prezto</code>. Aqui usaremos o <em>fork</em> que fiz do repositório original, pois dessa maneira tema e plugins úteis já vem habilitados.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/mstuttgart/prezto.git <span class="string">&quot;<span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zprezto&quot;</span></span><br></pre></td></tr></table></figure><p>No diretório <em>home</em> do seu usuário, iremos criar alguns links nencessários para o funcionamento do <code>zprezto</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s ~/.zprezto/runcoms/zlogin ~/.zlogin</span><br><span class="line"><span class="built_in">ln</span> -s ~/.zprezto/runcoms/zlogout ~/.zlogout</span><br><span class="line"><span class="built_in">ln</span> -s ~/.zprezto/runcoms/zpreztorc ~/.zpreztorc</span><br><span class="line"><span class="built_in">ln</span> -s ~/.zprezto/runcoms/zprofile ~/.zprofile</span><br><span class="line"><span class="built_in">ln</span> -s ~/.zprezto/runcoms/zshenv ~/.zshenv</span><br><span class="line"><span class="built_in">ln</span> -s ~/.zprezto/runcoms/zshrc ~/.zshrc</span><br></pre></td></tr></table></figure><p>Agora basta executarmos o <code>zsh</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh</span><br></pre></td></tr></table></figure><p>Para definir o <code>zsh</code>como <em>prompt</em> padrão basta entrar com o comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>e abrir uma nova aba ou janela de terminal. Você pode também trocar o <em>prompt</em> diretamente na tela de configurações do seu terminal, conforme a imagem abaixo:</p><p><img src="/images/mstuttgart/snapshot_45.png" alt="http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html"></p><p>Imagem retirada do seguinte tutorial: <a href="http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html">aqui</a>.</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>Os módulos (plugins) disponíveis podem ser visualizados no diretótio <code>modules</code> dentro do diretório de instalação do <code>zprezto</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.zprezto/modules</span><br></pre></td></tr></table></figure><p>Os módulos que você deseja utilizar podem ser adicionados no arquivo <code>~/.zpreztorc</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set the Prezto modules to load (browse modules).</span></span><br><span class="line"><span class="comment"># The order matters.</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:prezto:load&#x27;</span> pmodule \</span><br><span class="line">  <span class="string">&#x27;environment&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;terminal&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;editor&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;history&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;directory&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;spectrum&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;utility&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;git&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;completion&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;prompt&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;adicione o plugin aqui&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Temas"><a href="#Temas" class="headerlink" title="Temas"></a>Temas</h2><p>A lista de temas pode ser visualizada com o comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt -l</span><br></pre></td></tr></table></figure><p>Para visualizar um tema em expecífico no terminal, basta utilizar o comando e em seguida abrir um nova aba no terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt -p nomedotema</span><br></pre></td></tr></table></figure><p>Para utilizar o tema de maneira permanente, basta adicioná-lo no arquivo <code>~/.zpreztorc</code> entre aspas simples, na sessão destinada a entrada de temas:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Prompt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the prompt theme to load.</span></span><br><span class="line"><span class="comment"># Setting it to &#x27;random&#x27; loads a random theme.</span></span><br><span class="line"><span class="comment"># Auto set to &#x27;off&#x27; on dumb terminals.</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:prezto:module:prompt&#x27;</span> theme <span class="string">&#x27;nomedotema&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Além do <code>prezto</code>, existem outras opções de <em>frameworks</em> como o <a href="https://github.com/robbyrussell/oh-my-zsh">Oh my Zsh!</a>. Porém, apensar do mesmo possuir um número superior de temas e plugins, o <code>prezto</code> é de longe o mais rápido. Utilizo ele a um bom tempo e o mesmo tem sido uma das minhas principais ferramentas de desenvolvimento.</p><p>É isso pessoal. Espero que vocês gostem de utilizar o Zsh. Até o próximo post!</p><h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul><li><a href="http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html">hey-prezto-zsh-for-command-line-heaven</a></li><li><a href="http://mikebuss.com/2014/04/07/customizing-prezto/">customizing-prezto&#x2F;</a></li><li><a href="https://github.com/sorin-ionescu/prezto">prezto-github</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> zsh </tag>
            
            <tag> prezto </tag>
            
            <tag> prompt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mint-X KDE colors</title>
      <link href="/2016/07/2016-07-07-kde-colors/"/>
      <url>/2016/07/2016-07-07-kde-colors/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo tranquilo?</p><p>Desde quando comecei a ser um usuário Linux, há alguns anos, sempre gostei muito da distribuição <a href="http://www.linuxmint.com.br/">Linux Mint</a>, preferêncialmente a versão com o ambiente gráfico <a href="https://pt.wikipedia.org/wiki/KDE">KDE</a>.</p><p>Na versão 17.1, o <a href="http://www.linuxmint.com.br/">Linux Mint</a> trouxe um conjunto de ícones denominados <a href="https://www.gnome-look.org/content/show.php/Mint+X+Colors+Icon+Theme?content=165531">Mint-X</a>. Entretanto, diferente de outros ambientes gráficos como o Mate ou Cinnamon, o KDE não possuia temas de cores que combinavam com os novos ícones. Diante desse fato decidi criar temas de cores para combinar com cada conjunto de ícones.</p><h3 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h3><p>Abaixo segue alguns <em>screenshots</em> do tema e de sua respectiva <code>KDE Color</code>.</p><ul><li>Aqua: <img src="/images/kde-colors/aqua.png"></li><li>Green (<em>default</em>): <img src="/images/kde-colors/green.png"></li><li>Pink: <img src="/images/kde-colors/pink.png"></li><li>Teal: <img src="/images/kde-colors/teal.png"></li><li>Yellow: <img src="/images/kde-colors/yellow.png"></li></ul><p>Segue os links de <em>downloads</em> de cada tema.</p><ul><li><a href="https://www.kde-look.org/content/show.php/Mint-X+Aqua?content=176092">MintXAqua</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Blue?content=176093">MintXBlue</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Brown?content=176094">MintXBrown</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Gray?content=176095">MintXGray</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Green?content=176096">MintXGreen</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Orange?content=176097">MintXOrange</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Pink?content=176098">MintXPink</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Purple?content=176099">MintXPurple</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Red?content=176100">MintXRed</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Sand?content=176101">MintXSand</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Teal?content=176103">MintXTeal</a></li><li><a href="http://kde-look.org/content/show.php/Mint-X+Yellow?content=176104">MintXYellow</a></li></ul><h3 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h3><p>Clique no <em>link</em> da cor desejada e faça o <em>download</em> do aquivo <code>.color</code> e copie-o para o diretório <code>~/.kde/share/apps/color-schemes</code>. Após isso, basta ir em <code>Configurações-&gt;Aparência-&gt;Cores</code> e selecionar o novo tema de cores.</p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>É isso pessoal. Espero que gostem dos temas. Você pode acessar a página dos temas no <code>Github</code> através deste <a href="https://github.com/mstuttgart/mint-x-kde-colors">link</a>. Sinta-se livre para contribuir e&#x2F;ou fazer alguma crítica ou sugestão.</p><p>Vlw pessoal. Até o próximo <em>post</em>!</p>]]></content>
      
      
      <categories>
          
          <category> Meus Projetos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kde </tag>
            
            <tag> projeto </tag>
            
            <tag> tema </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Desfazendo commits com git revert</title>
      <link href="/2016/06/2016-06-14-desfazendo-com-commit-que-ja-foi-enviado-para-o-repositorio/"/>
      <url>/2016/06/2016-06-14-desfazendo-com-commit-que-ja-foi-enviado-para-o-repositorio/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo bem?</p><p>Caro leitor, se você costuma utilizar o <em>git</em> como controle de versão e trabalha em um mesmo repositório com vários contribuidores (ou mesmo sozinho), já deve ter se deparado com a situação em que você precisava desfazer um <em>commit</em> que já havia sido enviado para repositório. Existem algumas maneiras de corrigir isso, mas de longe, a mais correta é utilizar o comando <em>revert</em>, pois o mesmo não altera o histórico de <em>commits</em> do repositório e ao mesmo tempo expões de forma clara o que foi corrigido.</p><p>O comando <code>revert</code> cria um <em>commit</em> que desfaz todas as modificações do <em>commit</em> que você corrigir. Seu funcionamento é bem simples. Podemos definir o intervalo, a partir do último <em>commit</em> (HEAD) que será revertido.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD~3</span><br></pre></td></tr></table></figure><p>No exemplo acima, os últimos 3 <em>commits</em> serão revertidos, ou seja, o git irá criar um novo <em>commit</em> que desfaz as modificações realizadas pelo 3 últimos <em>commits</em> da <em>branch</em> atual em que você está.</p><p>Outro mode de uso consiste em passarmos um intervalo como parâmetro contendo os <em>commits</em> que desejamos reverter. Vamos considerar que estamos trabalhando com na <em>branch</em> <code>master</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert -n master~5..master~2</span><br></pre></td></tr></table></figure><p>No exemplo acima, vamos reverter o intervalo que vai do quinto <em>commit</em> (incluindo o mesmo) mais recente ao terceiro <em>commit</em> mais recente. Repare que o intervalor funciona da seguiten forma:</p><blockquote><blockquote><p>[commit antigo, commit recent[</p></blockquote></blockquote><p>O intervalo inclui o <em>commit</em> mais antigo e vai até o <em>commit</em> mais recente, NÃO incluindo este último.</p><p>Outra possibilidade é utilizar a <em>hash</em> dos <em>commits</em> seja passando uma <em>hash</em> unica ou um intervalo. Por exemplo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert -n f44db3..f167fc</span><br></pre></td></tr></table></figure><p>ou apenas</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert f44db3</span><br></pre></td></tr></table></figure><p>Pode ser que durante o processo de <em>revert</em> você tenha que realizar alguns ajustes ou correções nos arquivos que serão modificados. Quando isso acontecer, realize as modificações, execute o comando <code>git add .</code> para adicionar os arquivos que você editou e em seguida execute <code>git revert --continue</code> para que o processo de reversão continue.</p><p>Assim que realizar a reversão, basta enviar suas modificações para o repositório remoto utilizando o comando <code>git push</code>. Desse modo os outros desenvolvedores já terão acesso a versão corrigida do código e o histórico permacerá o mesmo, adicionando apenas o <em>commit</em> com os detalhes do <em>revert</em>.</p><p>É isso pessoal. Para saber mais detalhes do commando, basta dar uma olhada na documentação oficial <a href="https://git-scm.com/docs/git-revert">aqui</a>. Qualquer dúvida é só deixar um comentário.</p><p>Obrigado por ler e até o próximo <em>post</em> pessoal. Até mais!</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> dica </tag>
            
            <tag> git revert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Como distribuir sua aplicação com PyPI</title>
      <link href="/2016/06/2016-06-01-como-distribuir-seu-projeto-python-com-pypi/"/>
      <url>/2016/06/2016-06-01-como-distribuir-seu-projeto-python-com-pypi/</url>
      
        <content type="html"><![CDATA[<p>Imagine a seguinte situação: você passou alguns dias (ou mesmo meses) desenvolvendo uma módulo python, escreveu testes, implementou funcionalidades e depois de alguns ajustes, chegou a hora de liberar seu software para que outros desenvolvedores possam utilizá-lo. Qual o melhor modo de distribuí-lo?</p><p><img src="/images/mstuttgart/snapshot_44.png"></p><p>Caro leitor, se você costuma programar em Python (seja profissionalmente ou não) provavelmente já instalou outros módulos usando o <a href="https://pypi.python.org/pypi">PyPI</a>, através do comando abaixo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nomedomodulo</span><br></pre></td></tr></table></figure><p>Não seria interessante usar o mesmo método para distribuir a sua aplicação? Sim? Então mãos a obra.</p><h3 id="Sobre-o-PyPI-Python-Package-Index"><a href="#Sobre-o-PyPI-Python-Package-Index" class="headerlink" title="Sobre o PyPI - Python Package Index"></a>Sobre o PyPI - Python Package Index</h3><p>O site <a href="https://pypi.python.org/pypi">PyPI</a>, é um repositório de <em>softwares</em> desenvolvidos na linguagem Python. Em outras palavras, ele garante que seu pacote Python sempre esteja disponível para a instalação. O seu funcionamente é simples, porém algumas configurações inicias devem ser feitas para que tudo funcione corretamente.</p><h3 id="Crie-uma-conta"><a href="#Crie-uma-conta" class="headerlink" title="Crie uma conta"></a>Crie uma conta</h3><p>Primeiramente, para distribuir seus pacotes usando o <a href="https://pypi.python.org/pypi">PyPI</a>, precisamos criar uma conta em ambos os sites:</p><ul><li><a href="https://pypi.python.org/pypi?:action=register_form">PyPI Live</a></li><li><a href="https://testpypi.python.org/pypi?:action=register_form">PyPI Test</a></li></ul><p>Recomendo que você utilize o mesmo email e senha para ambos os sites. Posteriormente, isso tornará mais fácil o processo de configuração.</p><h3 id="Configurando-o-ambiente"><a href="#Configurando-o-ambiente" class="headerlink" title="Configurando o ambiente"></a>Configurando o ambiente</h3><p>O próximo passo é criar um arquivo <code>.pypirc</code> em sua <code>home</code>. Esse arquivo contem informações de auteticação, tanto para o <a href="https://pypi.python.org/pypi">PyPI Live</a> quando para o <a href="https://testpypi.python.org/pypi">PyPI Test</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.pypirc</span><br></pre></td></tr></table></figure><p>Apesar de não ser obrigatório a criação desse aquivo, ele facilita muito nosso trabalho, uma vez que você não precisaremos inserir nosso email e senha toda vez que formos enviar nosso código para o <a href="https://pypi.python.org/pypi">PyPI Live</a>.</p><p>Abra o arquivo <code>.pypirc</code> em seu editor de texto favorito, e insira as informações abaixo.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers =</span><br><span class="line">  pypi</span><br><span class="line">  pypitest</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">repository=https://pypi.python.org/pypi</span><br><span class="line">username=seu_nomedeusuario</span><br><span class="line">password=sua_senha</span><br><span class="line"></span><br><span class="line">[pypitest]</span><br><span class="line">repository=https://testpypi.python.org/pypi</span><br><span class="line">username=seu_nomedeusuario</span><br><span class="line">password=sua_senha</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Em <em>username</em> insira seu nome de usuário e <em>password</em>, insira sua senha. Faça isso tanto para o <code>pypi</code> quanto para o <code>pypitest</code>.</p><p>Um observação importante é que, caso a sua senha possua espaço, não a coloque entre aspas. Por exemplo, se a sua senha for “batuque da viola doida”, coloque exatamente o mesmo texto em <em>password</em>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=batuque da viola doida</span><br></pre></td></tr></table></figure><h3 id="Preparando-o-seu-modulo-Python"><a href="#Preparando-o-seu-modulo-Python" class="headerlink" title="Preparando o seu módulo Python"></a>Preparando o seu módulo Python</h3><p>Todo pacote distribuído pelo <a href="https://pypi.python.org/pypi">PyPI</a> precisa ter uma arquivo <code>setup.py</code> em seu diretório raiz. E se seu projeto também usa um arquivo <em>readme</em> em <em>markdown</em> (normalmente chamado <code>README.md</code>) você também precisará criar um arquivo chamado <code>setup.cfg</code>no diretório raiz do módulo.</p><p>Como exemplo, iremos utilizar o módulo <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">codigo_avulso_test_tutorial</a> que criei para ser utilizado como exemplo em nossos tutoriais. Assim, temos a seguinte estrutura básica de diretórios:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso_test_tutorial</span><br><span class="line">│   ├── circulo.py</span><br><span class="line">│   ├── figura_geometrica.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── quadrado.py</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── setup.cfg</span><br><span class="line">├── setup.py</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    ├── circulo_test.py</span><br><span class="line">    ├── figura_geometrica_test.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── quadrado_test.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Aqui, o que nos interessa são os arquivos <code>setup.py</code> e <code>setup.cfg</code>. Dentro do arquivo <code>setup.py</code> temos várias informações sobre nossa aplicação que serão usadas pelo <a href="https://pypi.python.org/pypi">PyPI</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;codigo-avulso-test-tutorial&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;0.1.1&#x27;</span>,</span><br><span class="line">    url=<span class="string">&#x27;https://github.com/mstuttgart/codigo-avulso-test-tutorial&#x27;</span>,</span><br><span class="line">    license=<span class="string">&#x27;MIT License&#x27;</span>,</span><br><span class="line">    author=<span class="string">&#x27;Michell Stuttgart&#x27;</span>,</span><br><span class="line">    author_email=<span class="string">&#x27;michellstut@gmail.com&#x27;</span>,</span><br><span class="line">    keywords=<span class="string">&#x27;tutorial test unittest codigoavulso&#x27;</span>,</span><br><span class="line">    description=<span class="string">u&#x27;Tutorial de teste unitário em Python para o blog Código Avulso&#x27;</span>,</span><br><span class="line">    packages=[<span class="string">&#x27;codigo_avulso_test_tutorial&#x27;</span>],</span><br><span class="line">    install_requires=[],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>O nome de cada <em>tag</em> é autoexplicativo, então não vou entrar em detalhes. Basta você usar o código acima e substituir com os dados do seu pacote.</p><p>O próximo passo é adicionar o seguinte conteúdo no arquivo <code>setup.cfg</code> (caso você o tenha criado).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">description-file = README.md</span><br></pre></td></tr></table></figure><p>Esse arquivo irá dizer ao <a href="https://pypi.python.org/pypi">PyPI</a> onde seu arquivo <em>readme</em> está.</p><h3 id="Publicando-sua-aplicacao-Python"><a href="#Publicando-sua-aplicacao-Python" class="headerlink" title="Publicando sua aplicação Python"></a>Publicando sua aplicação Python</h3><p>Agora iremos estudar os passos para enviar nossa aplicação para <a href="https://pypi.python.org/pypi">PyPI</a>, para que ela fique disponível para ser instalada através do <code>pip</code>.</p><h4 id="Enviando-para-PyPI-Test"><a href="#Enviando-para-PyPI-Test" class="headerlink" title="Enviando para PyPI Test"></a>Enviando para PyPI Test</h4><p>Primeiramente, vamos registrar nossa aplicação no <a href="https://testpypi.python.org/pypi">PyPI Test</a>. Esse passo serve para verificarmos se está tudo certo com nosso pacote e também validar se já não existe outro módulo com o mesmo nome.<br>Registramos nossa aplicação com o seguinte comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py register -r pypitest</span><br></pre></td></tr></table></figure><p>Se tudo ocorrer bem teremos a seguinte saída (Server responde 200):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">running register</span><br><span class="line">running egg_info</span><br><span class="line">creating codigo_avulso_test_tutorial.egg-info</span><br><span class="line">writing codigo_avulso_test_tutorial.egg-info/PKG-INFO</span><br><span class="line">writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt</span><br><span class="line">writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt</span><br><span class="line">writing manifest file <span class="string">&#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">reading manifest file <span class="string">&#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">writing manifest file <span class="string">&#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">running check</span><br><span class="line">Registering codigo-avulso-test-tutorial to https://testpypi.python.org/pypi</span><br><span class="line">Server response (200): OK</span><br></pre></td></tr></table></figure><p>Caso exista outro pacote com o mesmo nome, teríamos de escolher outro nome para o nosso pacote. Agora com nosso pacote devidamente registrado, executamos o comando abaixo para que o pacote seja enviado para o <a href="https://testpypi.python.org/pypi">PyPI Test</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist upload -r pypitest</span><br></pre></td></tr></table></figure><p>Se tudo ocorrer bem (Server responde 200), você verá uma saída semelhante a esta e já poderá ver sua aplicação na lista do <a href="https://testpypi.python.org/pypi">PyPI Test</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">running sdist</span><br><span class="line">running egg_info</span><br><span class="line">writing codigo_avulso_test_tutorial.egg-info/PKG-INFO</span><br><span class="line">writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt</span><br><span class="line">writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt</span><br><span class="line">reading manifest file <span class="string">&#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">writing manifest file <span class="string">&#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">warning: sdist: standard file not found: should have one of README, README.rst, README.txt</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">creating dist</span><br><span class="line">Creating tar archive</span><br><span class="line">removing <span class="string">&#x27;codigo-avulso-test-tutorial-0.1.1&#x27;</span> (and everything under it)</span><br><span class="line">running upload</span><br><span class="line">Submitting dist/codigo-avulso-test-tutorial-0.1.1.tar.gz to https://testpypi.python.org/pypi</span><br><span class="line">Server response (200): OK</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Enviando-para-PyPI-Live"><a href="#Enviando-para-PyPI-Live" class="headerlink" title="Enviando para PyPI Live"></a>Enviando para PyPI Live</h4><p>Agora é pra valer. Executamos o mesmo passos para o <a href="https://testpypi.python.org/pypi">PyPI Test</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py register -r pypi</span><br></pre></td></tr></table></figure><p>Tudo ocorrendo bem, enviamos nosso pacote:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist upload -r pypi</span><br></pre></td></tr></table></figure><p>Parabéns! Com esse ultimo passo, publicamos o nosso pacote Python com sucesso! Agora ele pode ser <a href="https://pypi.python.org/pypi/codigo-avulso-test-tutorial/0.1.1">visualizado na lista de aplicações</a> do <a href="https://pypi.python.org/pypi">PyPI</a> e ser instalado usando <code>pip</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nomedopacote</span><br></pre></td></tr></table></figure><p>Ou, para o nosso exemplo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install codigo_avulso_test_tutorial</span><br></pre></td></tr></table></figure><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>É isso pessoal. Neste tutorial vimos como distribuir nossa aplicação Python, desde a crição na conta no <a href="https://pypi.python.org/pypi">PyPI</a> até o registro e <em>upload</em> da nossa aplicação. Espero que tenham gostado e caso tenham alguma dúvida, deixem um comentário.</p><p>Obrigado pela leitura e até o próximo tutorial.</p><h3 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h3><ul><li><a href="https://wiki.python.org/moin/CheeseShopTutorial#Submitting_Packages_to_the_Package_Index">Documentação oficial</a></li><li><a href="https://www.codementor.io/python/tutorial/host-your-python-package-using-github-on-pypi">How to Host your Python Package on PyPI with GitHub</a></li><li><a href="http://peterdowns.com/posts/first-time-with-pypi.html">How to submit a package to PyPI</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pypi </tag>
            
            <tag> deploy </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coveralls - Como gerar relatórios de testes</title>
      <link href="/2016/05/2016-05-18-gerando-relatorios-de-teste-com-coveralls/"/>
      <url>/2016/05/2016-05-18-gerando-relatorios-de-teste-com-coveralls/</url>
      
        <content type="html"><![CDATA[<p>Na <a href="http://mstuttgart.com.br/python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4.html">terceira parte</a> do tutorial sobre <em>unittest</em>, vimos como utilizar o serviço <a href="https://coveralls.io/">Coveralls</a> para gerar relatórios sobre o testes do nosso projeto. Entretanto, uma “desvantagem” do serviço é que o processo de análise é iniciado apenas quando executarmos um <em>push</em> ou um <em>pull request</em>. Sendo assim, não seria interessante termos a liberdade de executar esses testes localmente?</p><p>Felizmente, os desenvolvedores do <a href="https://coveralls.io/">Coveralls</a> pensaram nisso e criaram um conjunto de comandos que nos permite executá-lo pelo terminal.</p><h3 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h3><p>Então, antes de iniciarmos, vamos a instalação do módulo, que pode ser feito pelo comando a seguir:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install coveralls</span><br></pre></td></tr></table></figure><p>Quando você instala o módulo, um <em>script</em> de linha de comando chamado <code>coverage</code> é adicionado ao diretório de <em>scripts</em> python no seu sistema. Para suportar diferentes versões do Python, o módulo vem com um conjunto de <em>scripts</em>. Então, para a versão 2.7 do Python, você pode utilizar o comando <code>coverage</code> ou <code>coverage2</code>. Para a versão 3, utilize <code>coverage3</code>.</p><h3 id="Gerando-relatorios"><a href="#Gerando-relatorios" class="headerlink" title="Gerando relatórios"></a>Gerando relatórios</h3><p>O comando usado para obtermos um relatório sobre os testes do nosso projeto é simples. No diretório do projeto, basta executar:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage run --<span class="built_in">source</span>=nomedopacote setup.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>o comando <code>run</code> irá coletar dados sobre nosso código fonte. No nosso caso, usaremos o repositorio que criamos para o tutorial anterior: <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">codigo-avulso-test-tutorial</a>. Assim, o comando seria:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage run --<span class="built_in">source</span>=codigo_avulso_test_tutorial setup.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Se você executar o comando <code>ls -la</code> no terminal, verá que um arquivo chamando <code>.coverage</code> foi criado. Esse arquivo contém algumas informações sobre o seu código. Vale alertar que para gerar os relatórios precisamos, obrigatoriamente, executar o comando acima, quando formos gerar o relatórios pela primeira vez ou quando o código sofrer alguma modificação.</p><p>Uma vez que o arquivo <code>.coverage</code> foi gerado, execute o seguinte comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage report</span><br></pre></td></tr></table></figure><p>Um relatório com a porcentagem de cobertura de testes (entre outras informações) de cada arquivo de código fonte será exibido no terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name                                               Stmts   Miss  Cover</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">codigo_avulso_test_tutorial/__init__.py                0      0   100%</span><br><span class="line">codigo_avulso_test_tutorial/circulo.py                 9      0   100%</span><br><span class="line">codigo_avulso_test_tutorial/figura_geometrica.py       5      0   100%</span><br><span class="line">codigo_avulso_test_tutorial/quadrado.py                8      0   100%</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">TOTAL                                                 22      0   100%</span><br></pre></td></tr></table></figure><p>As colunas exibidas no relatório possuem informações interessantes. São elas:</p><ul><li>Stmts: indica o total de trechos do código que, segundo o Coveralls, devem ser testados.</li><li>Miss: coluna que indica quantos trechos do código ainda não estão sob testes.</li><li>Cover: talvez a coluna mais importante, ela indica a porcentagem de cobertura de testes do arquivo fonte.</li></ul><p>Em <code>TOTAL</code> temos a cobertura total de testes do nosso projeto. Nesse projeto em especial, temos 100% porque o mesmo possui pouco código e os códigos existentes são simples de testar. Entretanto, em projeto mais complexos, nem sempre é possível chegar nessa porcentagem, então vale a pena se focar em escrever testes para as partes mais críticas do seu código e conseguir uma porcentagem perto dos 80%, considerado pelo <code>Coveralls</code> como satisfatório.</p><h4 id="Gerando-relatorio-em-HTML"><a href="#Gerando-relatorio-em-HTML" class="headerlink" title="Gerando relatório em HTML"></a>Gerando relatório em HTML</h4><p>Uma opção interessante é gerar o relatório em formato <code>html</code> com o comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage html</span><br></pre></td></tr></table></figure><p>Um diretório chamado <code>htmlcov</code> será criado no diretório do projeto. Dentro desse diretório existe um arquivo de nome <code>index.html</code>, que pode ser aberto no navegador.</p><p>Para o Google Chrome, usamos:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome htmlcov/index.html</span><br></pre></td></tr></table></figure><p>ou com o Firefox</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox htmlcov/index.html</span><br></pre></td></tr></table></figure><p>Abaixo temos o <code>index.html</code> aberto. Nele podemos ver a lista dos arquivos que estão cobertos pelo <code>Coveralls</code>.</p><p><img src="/images/mstuttgart/snapshot_41.png"></p><p>Vamos analisar os dados do arquivo <code>circulo.py</code>. Assim, temos as seguintes colunas:</p><ul><li><code>statements</code>: indica o total de trechos do código que, segundo o Coveralls, devem ser testadas. No caso do arquivo <code>circulo.py</code>,  o valor da coluna é 9, indicando que existem 9 trechos do código quem devem estar sob teste.</li><li><code>missing</code>: coluna que indica quantos trechos do código ainda não estão sob testes.</li><li><code>excluded</code>: coluna que indica quantos trechos do código foram ignorados pelo Coveralls. Algumas vezes pode ser necessário excluir alguns trechos de código do relatório devido ao tipo de código nele contido ou porque você simplesmente não deseja que aquele trecho seja incluido no relatorio. Isso é feito através de um arquivo de configuração, visto mais adiante.</li><li><code>coverage</code>: indica a porcentagem de cobertura de testes do nosso código.</li></ul><p>Na imagem abaixo, logo após clicarmos em <code>codigo_avulso_test_tutorial/circulo.py</code>, podemos ver os pontos do código que devem ser testados.</p><p><img src="/images/mstuttgart/snapshot_42.png"></p><p>Ao clicarmos nos três botões no cabeçalho da página:</p><p><img src="/images/mstuttgart/snapshot_43.png"></p><p>A página irá destacar, respectivamente, os trechos cobertos por testes, trechos sem testes ou que foram excluídos do <code>Coveralls</code>.</p><h4 id="Gerando-relatorio-em-XML"><a href="#Gerando-relatorio-em-XML" class="headerlink" title="Gerando relatório em XML"></a>Gerando relatório em XML</h4><p>Os relatórios em XML podem ser facilmente gerados por:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coverage xml</span><br></pre></td></tr></table></figure><p>Um arquivo chamado <code>coverage.xml</code> será criado.</p><h4 id="Criando-o-arquivo-coveragerc"><a href="#Criando-o-arquivo-coveragerc" class="headerlink" title="Criando o arquivo coveragerc"></a>Criando o arquivo coveragerc</h4><p>O arquivo <code>.coveragesrc</code> é usado para determinar parâmetros de funcionamento do comando <code>coverage</code>. Nele podemos incluir e excluir aquivos da analise do <code>Coveralls</code> entre outras configurações. Abaixo temos um exemplo de arquivo de configuração.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[run]</span><br><span class="line">source = codigo_avulso_test_tutorial</span><br><span class="line">omit =</span><br><span class="line">    codigo_avulso_test_tutorial/__init__.py</span><br><span class="line">    codigo_avulso_test_tutorial/main.py</span><br></pre></td></tr></table></figure><p>Na configuração acima, vamos omitir da análise o arquivo <code>__init__.py</code> e um arquivo <code>main.py</code>. Indicamos o <em>source</em> que é onde o <code>Coveralls</code> deve executar a análise.</p><p>O arquivo de configuração ainda pode receber várias informações. Você pode ver mais delas <a href="http://coverage.readthedocs.io/en/latest/source.html#source">aqui</a>.</p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Neste tutorial vimos um pouco mais sobre o <code>Coveralls</code>. Evitei colocar as informações deste tutorial nos tutoriais anteriores a fim de simplificá-los. Você pode aprender mais sobre o módulo consultando sua documentação <a href="http://coverage.readthedocs.io/en/latest/index.html">aqui</a>.</p><p>É isso pessoal, obrigado pela leitura e até o próximo tutorial.</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> coveralls </tag>
            
            <tag> testes </tag>
            
            <tag> teste </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#4 - Python com Unittest, Travis CI, Coveralls e Landscape</title>
      <link href="/2016/05/2016-05-07-python-com-unittest-travis-ci-coveralls-e-landscape-parte-4-de-4/"/>
      <url>/2016/05/2016-05-07-python-com-unittest-travis-ci-coveralls-e-landscape-parte-4-de-4/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo bem?</p><p>Na <a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4.html">terceira</a> parte deste tutorial, aprendemos a usar o <code>Coveralls</code> para gerar relatórios de testes para o nosso projeto. A próxima ferramenta que iremos estudar será o serviço <code>Landscape</code>. Neste tutorial serei breve, já que o uso <em>default</em> da ferramenta é bem simples.</p><h4 id="Sobre-o-Landscape"><a href="#Sobre-o-Landscape" class="headerlink" title="Sobre o Landscape"></a>Sobre o Landscape</h4><p><a href="https://landscape.io/">Landscape</a> é uma ferramenta online semelhante ao já conhecido <a href="https://www.pylint.org/">PyLint</a>, ou seja, é um verificador de <em>bugs</em>, estilo e de qualidade de código para <a href="https://www.python.org/">Python</a>.</p><p><img src="/images/mstuttgart/snapshot_32.png"></p><p>Quando ativamos a análise do <code>Landscape</code> em nosso repositório, ele é executado após cada <em>push</em> ou <em>pull request</em> e realiza uma varredura em nosso código fonte <a href="https://www.python.org/">Python</a> atrás de possíveis <em>bugs</em>, como por exemplo variáveis sendo usadas antes de serem declaradas, nomes reservados sendo usados como nomes de variáveis e etc. Ele também verifica se a formatação do seu código esta seguindo a <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a> e aponta possíveis falhas de <em>design</em> em seu código.</p><p>Uma vez que a análise esteja finalizada, a ferramenta indica em porcentagem a “qualidade” do nosso código, ou em palavras mais precisas, o quanto nosso código está bem escrito segundo as boas práticas de desenvolvimento. Vale deixar claro que o <code>Landscape</code> não verifica se seu código funciona corretamente, isso é responsabilidade dos testes que você escreveu, como foi visto na <a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-1-de-4.html">primeira parte</a> do tutorial.</p><p>Semelhante as ferramentas dos tutoriais anteriores, o <code>Landscape</code> é totalmente gratuito para projetos <em>opensource</em>.</p><h4 id="Criando-uma-conta"><a href="#Criando-uma-conta" class="headerlink" title="Criando uma conta"></a>Criando uma conta</h4><p>O processo de inscrição é simples. No topo da página temos a permissão de nos inscrevermos usando a conta do <code>Github</code>. Realize a inscrição e vamos as configurações.</p><p><img src="/images/mstuttgart/snapshot_33.png"></p><h4 id="Ativando-o-servico"><a href="#Ativando-o-servico" class="headerlink" title="Ativando o serviço"></a>Ativando o serviço</h4><p>De todas as ferramentas apresentadas, esta é a mais simples de configurar. O único passo necessário aqui é ativar o serviço para o nosso repositório. Como exemplo, estarei usando o mesmo repositório dos últimos tutoriais. Clique <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">aqui</a> para visualizar o repositório.</p><p>Assim que realizar o cadastro, vamos nos deparar com uma tela contendo a listagem dos nosso repositórios que estão utilizando o serviço. Se você nunca usou o serviço provavelmente não terá nenhum repositório, então faça o seguinte: clique no botão <code>Sync with Github now</code>, para realizar a sincronização com a sua conta do <a href="https://github.com/">Github</a>. Assim que a sincronização estiver completa, clique no botão <code>Add repository</code>.</p><p><img src="/images/mstuttgart/snapshot_34.png"></p><p>Ao clicar, seremos levados a uma tela com a listagem de todos os repositórios que temos permissão de escrita. Procure o repositório que deseja ativar o serviço (lembrando que o <code>Landscape</code> funciona apenas para projetos <code>Python</code>) e o selecione (basta clicar sobre o nome do repositório).</p><p><img src="/images/mstuttgart/snapshot_35.png"></p><p>Adicione o repositório clicando no botão verde <code>Add Repository</code>, logo abaixo da lista. Seremos novamente redirecionados a tela inicial, agora com o repositório escolhido já visível.</p><p><img src="/images/mstuttgart/snapshot_36.png"></p><p> Inclusive, a partir desse momento, o <code>Coveralls</code> já irá iniciar a análise do seu projeto. Clique no nome do repositório para ver mais detalhes da analise.</p><p><img src="/images/mstuttgart/snapshot_37.png"></p><p> No caso do meu projeto de teste, temos que a “saúde” do código está em <code>100%</code>, ou seja, nenhuma parte do código apresenta erros de estilo, <em>bugs</em> e está utilizando boas práticas de programação em todo seu escopo.</p><p> Na barra lateral localizada à esquerda da página, temos alguns items, entre os quais os mais importantes são descritos a seguir:</p><ul><li><code>Error</code>: são instruções no código que provavelmente indicam um erro. Por exemplo, quando referenciamos uma variável sem declará-la antes ou realizamos a chamada de algum método inexistente.</li><li><code>Smells</code>: são sinais ou sintomas no código que possivelmente indicam uma falha no projeto do <em>software</em>. Diferentemente de um <em>bug</em>, <em>code smells</em> não indicam uso incorreto da linguagem de programação e nem impedem o <em>software</em> de funcionar. Ao invés disso, eles indicam falhas no <em>design</em> do projeto que podem atrasar seu desenvolvimento ou mesmo ser a porta de entrada para <em>bugs</em> no futuro. Exemplos de <em>code smells</em> são: métodos ou códigos duplicados, classes muito grandes, uso forçado de algum <em>design pattern</em> quando o mesmo poderia ser substituído por um código mais simples e fácil de manter, métodos muito longos ou com excessivo números de parâmetros e por aí vai. A lista pode crescer muito haha… para mais detalhes <a href="https://en.wikipedia.org/wiki/Code_smell">leia</a>.</li><li><code>Style</code>: como o nome sugere, este item exibe os erros de estilo em seu código indicando trechos de código que não estão seguindo as regras de estilo da <code>PEP8</code>, trechos de códigos com identação incorreta e etc.</li></ul><p>Como último passo, agora somente nos resta adicionar uma <code>badge</code> no arquivo <code>README.md</code> em nosso repositório. Assim poderemos ver a porcentagem de “saúde” do nosso projeto sem precisar acessar a página do <code>Landscape</code>.</p><p>Na página com o resultado da análise (onde é exibido a porcentagem de “saúde” do seu projeto), podemos pegar a <code>badge</code> do <code>Landscape</code>. No canto superior direito da tela, você encontra os botões abaixo:</p><p><img src="/images/mstuttgart/snapshot_38.png"></p><p>Clique na <code>badge</code> (onde está escrito <em>health</em>) e a seguinte janela será exibida:</p><p><img src="/images/mstuttgart/snapshot_39.png"></p><p>Selecione o texto da opção <code>Markdown</code> e cole-o no <code>README.md</code> do seu repositório. O meu <code>README.md</code> ficou assim:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Codigo Avulso Test Tutorial</span></span><br><span class="line">[<span class="string">![Build Status</span>](<span class="link">https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master</span>)](<span class="link">https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">![Coverage Status</span>](<span class="link">https://coveralls.io/repos/github/mstuttgart/codigo-avulso-test-tutorial/badge.svg?branch=master</span>)](<span class="link">https://coveralls.io/github/mstuttgart/codigo-avulso-test-tutorial?branch=master</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">![Code Health</span>](<span class="link">https://landscape.io/github/mstuttgart/codigo-avulso-test-tutorial/master/landscape.svg?style=flat</span>)](<span class="link">https://landscape.io/github/mstuttgart/codigo-avulso-test-tutorial/master</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Também é possível configurar o <code>Landscape</code> para que o mesmo exclua algum diretório&#x2F;arquivo da análise (muito útil com arquivos de interface compilados, usando por quem trabalha com PyQt&#x2F;PySide) entre outras opções, mas isso fica para um tutorial futuro.</p><p>Abaixo podemos ver as três <code>badges</code> que adicionamos em nosso projeto. Clique <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">aqui</a> para acessar o repositório.</p><p><img src="/images/mstuttgart/snapshot_40.png"></p><h4 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h4><p>Pronto pessoal, agora temos o nosso repositório exibindo informações sobre os testes unitários, relatórios de testes e analises de qualidade de código. Isso não garante que seu projeto seja livre de falhas e <em>bugs</em>, mas te ajuda a evitá-los.</p><p>Vale lembrar que todas essas ferramentas ajudam muito, mas nada substitui o senso crítico e o hábito de sempre usar boas práticas durante o desenvolvimento. Por isso sempre busque aprender mais, estudar mais, ser humilde e ouvir quem tem mais experiência que você. Enfim, ser um programador e uma pessoa melhor a cada dia. Fica o conselho para todos nós, incluindo para este que vos escreve.</p><p>Espero que tenham gostado desta série de tutoriais. Obrigado por ler até aqui e até o próximo <em>post</em>.</p>]]></content>
      
      
      <categories>
          
          <category> Python com Unittest, Travis CI, Coveralls e Landscape </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> travis-ci </tag>
            
            <tag> coveralls </tag>
            
            <tag> landscape </tag>
            
            <tag> tdd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#3 - Python com Unittest, Travis CI, Coveralls e Landscape</title>
      <link href="/2016/04/2016-04-29-python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4/"/>
      <url>/2016/04/2016-04-29-python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4/</url>
      
        <content type="html"><![CDATA[<p>Fala pessoal, tudo bem?</p><p>Na <a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-2-de-4.html">segunda</a> parte deste tutorial, aprendemos a usar o <code>Travis CI</code> para automatizar os testes do nosso projeto, facilitando a manutenção do código quando temos vários colaboradores. Nesta terceira parte, vamos configurar o serviço <a href="https://coveralls.io/">Coveralls</a> para que o mesmo gere relatórios de teste sobre o nosso projeto. Os relatórios são muito úteis quando desejamos verificar o quanto do nosso projeto está coberto por testes, evitando assim que alguma <em>feature</em> importante fique de fora. Assim como o <code>Travis CI</code>, o <code>Coveralls</code> será executado após cada <em>push</em> ou <em>pull request</em>.</p><p>Diferente do tutorial anterior, serei breve sobre o processo de inscrição do <code>Coveralls</code>, focando mais no seu uso.</p><h4 id="Criando-uma-conta"><a href="#Criando-uma-conta" class="headerlink" title="Criando uma conta"></a>Criando uma conta</h4><p>Antes de começarmos a usar o <code>Coveralls</code> precisamos criar uma conta no serviço. Isso pode ser feito <a href="https://coveralls.io/">aqui</a>. O serviço é totalmente gratuíto para projetos <code>opensource</code>.</p><p><img src="/images/mstuttgart/snapshot_17.png"></p><p>Após a inscrição, você será levado para uma nova página com uma listagem dos repositórios que você possui no <code>Github</code>.</p><p><img src="/images/mstuttgart/snapshot_18.png"></p><p>Na imagem acima já podemos visualizar o projeto que estou usando neste tutorial: <code>codigo-avulso-test-tutorial</code>. Caso o seu repositório não esteja na lista, clique no botão <code>ADD REPOS</code> no canto superior direito da tela.</p><p><img src="/images/mstuttgart/snapshot_19.png"></p><p>Ao clicar no botão, você será redirecionado a uma página onde é possível slecionar quais repositórios serão analisados pelo <code>Coveralls</code>. Caso o repositório desejado não esteja na lista, clique no botão <code>RE-SYNC REPOS</code> no canto superior direito. Ele vai realizar o escaneamento do seu perfil no <code>Github</code> e importar seus projetos.</p><p>Clique no botão escrito <code>OFF</code> ao lado esquerdo do nome do repositório. Isso ativará o serviço para este repositório.</p><p><img src="/images/mstuttgart/snapshot_20.png"></p><p>Clique no botão <code>DETAILS</code> ao lado direito do nome do repositório e você será redirecionado para uma tela de configuração. Aqui o passo mais interessante é pegar a <em>url</em> da <code>badge</code>para usarmos em nosso README.md.</p><p><a href="https://coveralls.io/github/mstuttgart/codigo-avulso-test-tutorial?branch=master"><img src="https://coveralls.io/repos/github/mstuttgart/codigo-avulso-test-tutorial/badge.svg?branch=master" alt="Coverage Status"></a></p><p>Na área superior da tela, temos o seguinte:</p><p><img src="/images/mstuttgart/snapshot_21.png"></p><p>Clique em <code>EMBED</code> e uma janelá de dialogo irá se abrir, selecione e copie o código em <code>MARKDOWN</code>.</p><p><img src="/images/mstuttgart/snapshot_22.png"></p><p>Agora cole o código no cabeçalho do seu arquivo README, semelhante ao que fizemos com o <code>Travis CI</code> no tutorial anterior.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Codigo Avulso Test Tutorial</span></span><br><span class="line">[<span class="string">![Build Status</span>](<span class="link">https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master</span>)](<span class="link">https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial</span>)</span><br><span class="line">[<span class="string">![Coverage Status</span>](<span class="link">https://coveralls.io/repos/github/mstuttgart/codigo-avulso-test-tutorial/badge.svg?branch=master</span>)](<span class="link">https://coveralls.io/github/mstuttgart/codigo-avulso-test-tutorial?branch=master</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Concluída esta estapa, o próximo passo será adicionarmos o serviço em nosso projeto no <code>Github</code>.</p><h4 id="Adicionando-o-Coveralls"><a href="#Adicionando-o-Coveralls" class="headerlink" title="Adicionando o Coveralls"></a>Adicionando o Coveralls</h4><p>Vamos adicionar o serviço durante o processo de teste do projeto. Assim, depois de cada <code>push</code> ou <code>pull request</code>, o <code>Coveralls</code> irá gerar o relatório sobre nossos testes.</p><p>Abra o arquivo <code>.travis.yml</code> em seu editor. Teremos o seguinte código:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line"></span><br><span class="line">python:</span><br><span class="line">  - &quot;2.7&quot;</span><br><span class="line"></span><br><span class="line">sudo: required</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - run setup.py test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Agora vamos alterá-lo adicionando a funcionalidade do <code>Coveralls</code>. O códio atualizado do <code>.travis.yml</code> pode ser visto a seguir:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line"></span><br><span class="line">python:</span><br><span class="line">  - &quot;2.7&quot;</span><br><span class="line"></span><br><span class="line">sudo: required</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - pip install coveralls</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - coverage run --source=codigo_avulso_test_tutorial setup.py test</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">  - coveralls</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>install</code>:  aqui adicionamos o comando <code>pip install coveralls</code>. A instalação do <code>coveralls</code> é necessaria para que possamos gerar os relatórios. Obs.: Você pode instalá-lo em sua máquina e gerar relátorios em html. Fica a sugestão de estudo.</li><li><code>script</code>: aqui substimuímos o comando <code>run setup.py test</code> por <code>coverage run --source=codigo_avulso_test_tutorial setup.py test</code>. Esse comando executa os mesmo testes de antes, mas já prove um relatório sobre a cobertura de testes do seu código.</li><li><code>after_success</code>: a última alteração foi adicionar a tag <code>after_success</code>. Essa tag indica que após a execuação bem sucedida dos testes, deve-se iniciar o serviço de analise do <code>Coveralls</code>.</li></ul><p>Assim que terminar de fazer essas alterações você já pode enviar o seu código para o <code>Github</code>. Assim que subir o código, o <code>Travis CI</code> irá iniciar o processo de teste. Finalizando os testes, o <code>Coveralls</code>será iniciado. Se tudo ocorrer bem, a badge que adicionamos no aquivo README do projeto será atualizada exibindo a porcentagem do nosso código que está coberta por testes. Você pode clicar na badge ou ir até o seu perfil no site do <a href="https://coveralls.io/">Coveralls</a> e verificar com mais detalhes as informações sobre seu projeto.</p><p><img src="/images/mstuttgart/snapshot_23.png"></p><p>Na seção <code>LATEST BUILDS</code> clique no último build disponível que será possível verificar a porcentagem cobertura de teste para cada arquivo do seu projeto.</p><p>Caso tenha interessa, aqui está o link do repositorio que usei para esse tutorial: <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">codigo-avulso-test-tutorial</a>.</p><h4 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h4><p>Aqui encerramos a terceira parte do nossa série de tutoriais sobre <code>Unittest</code>. O <code>Coveralls</code> ainda possui muitas configurações não mostradas aqui, então se você se interessar, fica a sugestão de estudo. No próximo tutorial veremos como utilizar o <code>Landscape</code>, um <em>linter</em> que analise nossos códigos atrás de problemas de sintaxe, formatação e possíveis erros de códigos (variáveis não declaradas, varíaveis com escopo incorreto e etc).</p><p>É isso pessoal. Obrigado por ler até aqui e até o próximo tutorial!</p>]]></content>
      
      
      <categories>
          
          <category> Python com Unittest, Travis CI, Coveralls e Landscape </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> travis-ci </tag>
            
            <tag> coveralls </tag>
            
            <tag> landscape </tag>
            
            <tag> tdd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#2 - Python com Unittest, Travis CI, Coveralls e Landscape</title>
      <link href="/2016/04/2016-04-19-python-com-unittest-travis-e-coveralls-parte-2-de-4/"/>
      <url>/2016/04/2016-04-19-python-com-unittest-travis-e-coveralls-parte-2-de-4/</url>
      
        <content type="html"><![CDATA[<p>Title: Python com Unittest, Travis CI, Coveralls e Landscape (Parte 2 de 4)<br>Slug: python-com-unittest-travis-ci-coveralls-e-landscape-parte-2-de-4<br>Date: 2016-04-19 20:34:44<br>Category: Python<br>Tags: python, git, travis-ci, coveralls, landscape, unittest<br>Author: Michell Stuttgart<br>Summary: Nesta segunda parte do tutorial vamos aprender a utilizar o serviço de testes Travis CI, desde a inscrição no serviço, configuração e uso em nosso projeto no Github.</p><p>Fala pessoal, tudo bem?</p><p>Na <a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-1-de-4.html">primeira</a> parte deste tutorial, aprendemos como criar testes para nosso projeto. Nesta segunda parte, vamos configurar o serviço Travis CI para que o mesmo execute os testes do nosso projeto diretamente no github. Isso é especialmente útil quando possuímos várias pessoas trabalhando em um mesmo projeto, pois o <code>Travis CI</code> executa os testes após cada <em>push</em> ou <em>pull request</em>. Dessa forma garantimos que um determinado <em>commit</em> não irá “quebrar” nossa aplicação.</p><p>Antes de inicarmos nosso trabalho de configuração do <code>Travis CI</code>, vamos aprender um pouco mais sobre esse serviço.</p><h4 id="Sobre-o-Travis-CI"><a href="#Sobre-o-Travis-CI" class="headerlink" title="Sobre o Travis CI"></a>Sobre o Travis CI</h4><p><a href="https://travis-ci.org/">Travis CI</a> é uma ferramenta online que permite executar o <em>deploy</em> de sua aplicação, rodando de maneira automática os testes do seu projeto hospedado no <a href="https://github.com/">Github</a>. Através dele é possível manter um histórico dos testes para cada <em>commit</em> do seu projeto, executar testes em paralelo, além do suporte a diversas linguagens de programação. Você pode, por exemplo, verificar se seu projeto funciona corretamente tanto com Python 2.7, quanto com o Python 3.</p><p>Após a execução do teste, recebemos um email nos informando se o teste foi bem sucedido ou se houve alguma falha. O serviço é totalmente gratuito para projetos <em>opensource</em>.</p><p><img src="/images/mstuttgart/snapshot_24.png" alt="Alt Text"></p><h4 id="Criando-uma-conta"><a href="#Criando-uma-conta" class="headerlink" title="Criando uma conta"></a>Criando uma conta</h4><p>Para utilizarmos o <code>Travis CI</code> em nosso projeto, precisamos primeiro realizar nosso cadastro no serviço. Para isso acesse <a href="https://travis-ci.org/">https://travis-ci.org/</a>.</p><p>Logo no topo direito da página, temos o botão abaixo, para nos inscrevermos usando nossa conta no Github.</p><p><img src="/images/mstuttgart/snapshot_25.png"></p><p>Ao pressionar o botão, você será direcionado para a página a seguir:</p><p><img src="/images/mstuttgart/snapshot_26.png"></p><p>Realize o login com seu usuário&#x2F;senha do <code>Github</code>. Assim que realizar o login, na canto superior direito da tela, clique no seu nome de usuário e, em seguida, em <code>&quot;Accounts&quot;</code>. Com isso, uma tela com todos os repositórios que você tem permissão de escrita (repositórios pessoais, de organização, forks e etc) será exibida.</p><p><img src="/images/mstuttgart/snapshot_27.png"></p><p>Agora vamos ativar o serviço para o repositório que criei na primeira parte do tutorial: <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">codigo-avulso-test-tutorial</a>. Basta clicar no botão “X” ao lado esquerdo do nome do seu repositório. Ele ficará assim:</p><p><img src="/images/mstuttgart/snapshot_28.png"></p><p>Bom, a partir de agora, seu repositório está pronto para o usar o <code>Travis CI</code>, porém antes precisamos configurar os parâmetros de teste do nosso projeto.</p><h4 id="Configurando-o-Travis-CI-em-nosso-repositorio"><a href="#Configurando-o-Travis-CI-em-nosso-repositorio" class="headerlink" title="Configurando o Travis CI em nosso repositório"></a>Configurando o Travis CI em nosso repositório</h4><p>No diretório raiz do nosso projeto, vamos criar um arquivo chamado <code>.travis.yml</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .travis.yml</span><br></pre></td></tr></table></figure><p> Observe que o nome do arquivo obrigatoriamente deve inciar com ponto. Após criarmos o arquivo, teremos a seguinte estrutura de diretórios:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso_test_tutorial</span><br><span class="line">│   ├── circulo.py</span><br><span class="line">│   ├── circulo.pyc</span><br><span class="line">│   ├── figura_geometrica.py</span><br><span class="line">│   ├── figura_geometrica.pyc</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __init__.pyc</span><br><span class="line">│   ├── quadrado.py</span><br><span class="line">│   └── quadrado.pyc</span><br><span class="line">├── codigo_avulso_test_tutorial.egg-info</span><br><span class="line">│   ├── dependency_links.txt</span><br><span class="line">│   ├── PKG-INFO</span><br><span class="line">│   ├── SOURCES.txt</span><br><span class="line">│   └── top_level.txt</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── setup.py</span><br><span class="line">├── test</span><br><span class="line">│   ├── circulo_test.py</span><br><span class="line">│   ├── circulo_test.pyc</span><br><span class="line">│   ├── figura_geometrica_test.py</span><br><span class="line">│   ├── figura_geometrica_test.pyc</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __init__.pyc</span><br><span class="line">│   ├── quadrado_test.py</span><br><span class="line">│   └── quadrado_test.pyc</span><br><span class="line">└── .travis.yml</span><br></pre></td></tr></table></figure><p>Esse é nosso arquivo de configuração. Nele vamos adicionar qual linguagen nosso projeto utiliza, de quais módulos e pacotes ele depende, entre outras inúmeros ajustes, dependendo do seu projeto. Aqui, vou mostrar as configurações básicas que utilizo, para que o tutorial não fique muito extenso. Então, abra o arquivo <code>.travis.yml</code> em seu editor preferido e adicione o seguinte código.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line"></span><br><span class="line">python:</span><br><span class="line">  - &quot;2.7&quot;</span><br><span class="line"></span><br><span class="line">sudo: required</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - python setup.py test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> Agora vamos explicar cada tag do arquivo:</p><ul><li><code>language</code>: podemos definir qual linguagem nosso projeto utiliza. Se este parâmetro não for incluso, o <code>Travis CI</code> irá considerar a linguagem <code>ruby</code> como <em>default</em>.</li><li><code>python</code>: aqui definimos que os testes serão executados usando o Python 2.7 e se desejarmos, também podemos adicionar outras versões do Python.</li><li><code>sudo</code>: usado para executar o <code>Travis CI</code> como permissão de usuário <code>root</code>. Necessário caso você deseje instalar alguma dependência usando o comando <code>apt-get install nomepacote</code>.</li><li><code>script</code>: nessa <code>tag</code>, finalmente vamos executar nosso <em>script</em> de teste.</li></ul><p>Dica: neste <a href="http://lint.travis-ci.org/">link</a> você pode colar o código do seu arquivo <code>.travis.yml</code> para verificar se o mesmo está correto.</p><h3 id="Adicionado-uma-badge-para-o-repositorio"><a href="#Adicionado-uma-badge-para-o-repositorio" class="headerlink" title="Adicionado uma badge para o repositório"></a>Adicionado uma badge para o repositório</h3><p>O próximo passo é é adicionar uma <code>badge</code> para o nosso repositório. Isso não é obrigatório, mas ajuda você, sua equipe e outras pessoas que se interessarem pelo seu repositório, a visualizar o <em>status</em> da execução dos testes e verificar se seu código está funcionando corretamente.</p><p><a href="https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial"><img src="https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master" alt="Build Status"></a></p><p>Na tela onde você ativou o <code>Travis CI</code> para seu reposiorio, clique no símbolo da engrenagem.</p><p><img src="/images/mstuttgart/snapshot_28.png"></p><p>Na nova tela, podemos realizar algumas configurações, como por exemplo se o <code>Travis CI</code> será executado para <em>push</em> e para <em>pull requests</em> e também podemos pegar a <code>badge</code>. Ao clicarmos no botão logo ao lado do nome do repositório, uma janela será exibida.</p><p><img src="/images/mstuttgart/snapshot_30.png"></p><p>Selecione a <em>branch</em> a ser observada pelo Travis CI, escolha a opção <code>Markdown</code> e copie o código que aparecerá na caixa de texto para o arquivo <code>README.md</code> do seu repositório. O meu <code>README.md</code> ficou assim:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Codigo Avulso Test Tutorial</span></span><br><span class="line">[<span class="string">![Build Status</span>](<span class="link">https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master</span>)](<span class="link">https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial</span>)</span><br><span class="line"></span><br><span class="line">Tutorial de teste unitário em Python para o blog [<span class="string">Código Avulso</span>](<span class="link">http://codigoavulso.com.br/</span>).</span><br></pre></td></tr></table></figure><p>Com esses passos, quando algum <em>push</em> ou <em>pull request</em> for enviado ao repositório, o <code>Travis CI</code> executará os testes, garantindo assim o funcionamento estável do nosso código e nos avisando caso alguma modificação venha causar algum erro em nossa aplicação.</p><p><img src="/images/mstuttgart/snapshot_31.png"></p><p>Vale lembrar que o tempo para <em>deploy</em> pode variar, dependendo da quantidade de testes do seu projeto, quantidade de dependências a serem instaladas e etc.</p><h4 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h4><p>Aqui encerramos a segunda parte do nossa série de tutoriais sobre <code>Unittest</code>. Eu decidi separar a série em 4 partes para que cada uma fosse explicada com mais detalhes mas sem deixar o tutorial muito extenso. O <code>Travis IC</code> ainda possui muitas configurações não abordadas aqui, então se você se interessar, pode dar uma olhada na sua documentação oficial <a href="https://docs.travis-ci.com/">aqui</a>. No próximo tutorial veremos como utilizar o <code>Coveralls</code> para gerar relatórios dos nossos testes.</p><p>É isso pessoal. Obrigado por ler até aqui!</p><p>Até o próximo tutorial!</p>]]></content>
      
      
      <categories>
          
          <category> Python com Unittest, Travis CI, Coveralls e Landscape </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> travis-ci </tag>
            
            <tag> coveralls </tag>
            
            <tag> landscape </tag>
            
            <tag> tdd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#1 - Python com Unittest, Travis CI, Coveralls e Landscape</title>
      <link href="/2016/04/2016-04-12-python-com-unittest-travis-e-coveralls-parte-1-de-4/"/>
      <url>/2016/04/2016-04-12-python-com-unittest-travis-e-coveralls-parte-1-de-4/</url>
      
        <content type="html"><![CDATA[<p>Durante o desenvolvimento de um software, tão importante quanto escrever um código organizado e que siga as melhores práticas, é garantir que o mesmo cumpra os requisitos a que ele se propõe. Em outras palavras, garantir que o software funcione de maneira adequada.</p><p>O processo de testes de um software faz parte do seu desenvolvimento, porém muitas vezes ele é encarado como algo tedioso e desnecessário. Entretanto, todo bom desenvolvedor sabe que investir tempo escrevendo testes para seu software está longe de ser “desperdício de tempo”. O processo de teste, quando feito por uma pessoa, além de sujeitos a falhas é tedioso e demorado. Tendo isso em mente, podemos lançar mão de ferramentas que realizarão o processo de teste por nós. Em Python, umas das ferramentes da bibloteca padrão destinada a teste é a <code>Unittest</code>, que usaremos nesse tutorial.</p><p>Nesta série de postagem, irei mostrar o passo-a-passo na criação de testes unitários para um pequeno projeto que vamos criar no github. Vou explicar como configurar a ferramenta <a href="https://travis-ci.org/">Travis</a>, que será responsável por executar os nossos testes no github. A ferramenta <a href="https://coveralls.io/">Coveralls</a>, que mapeia nosso código, e nos indica o quanto dele está coberto por testes. E como bônus, adicionar ao nosso projeto o <a href="https://landscape.io/">Landscape</a>, ferramenta que monitora a “saúde” do nosso código.</p><h3 id="Iniciando-nosso-projeto"><a href="#Iniciando-nosso-projeto" class="headerlink" title="Iniciando nosso projeto"></a>Iniciando nosso projeto</h3><p>Inicialmente, criei no <a href="https://github.com/">github</a> um repositório que vai receber meu código e que posteriormente será configurado para rodar nossos testes. No meu caso, o repositório foi esse <a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial">codigo-avulso-test-tutorial</a>. Após realizar o clone, criei a seguite estrutura de diretorios:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso_test_tutorial</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">└── test</span><br><span class="line">    └── __init__.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>O diretório <code>codigo_avulso_test_tutorial</code> receberá o código da nossa aplicação e o diretório <code>test</code> receberá o código de teste.<br>O nosso projeto consiste de um grupo de classes representando figuras geométricas (quadrados, círculos e etc). Teremos uma classe base chamada <code>FiguraGeometrica</code> que possui dois métodos, a saber: <code>get_area</code> e <code>get_perimetro</code>, sendo ambos metódos abstratos. Cada uma dessas classes filhas de <code>FiguraGeometrica</code> irá possuir sua própria implementação desses métodos.</p><p>Dentro do diretório <code>codigo_avulso_test_tutorial</code>, irei criar os fontes do nosso código:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> figura_geometrica.py circulo.py quadrado.py</span><br></pre></td></tr></table></figure><p>Dentro do diretório <code>test</code>, irei criar os fontes do nosso código de teste:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> figura_geometrica_test.py circulo_test.py quadrado_test.py</span><br></pre></td></tr></table></figure><p>Uma observação importante é que os arquivos de teste devem ter o nome terminado em <code>test</code>, para que o módulo de Unittest encontre os nossos arquivos de teste automaticamente. Após a criação dos arquivos, teremos a seguinte estrutura de diretório:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso_test_tutorial</span><br><span class="line">│   ├── circulo.py</span><br><span class="line">│   ├── figura_geometrica.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── quadrado.py</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">└── test</span><br><span class="line">    ├── circulo_test.py</span><br><span class="line">    ├── figura_geometrica_test.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── quadrado_test.py</span><br></pre></td></tr></table></figure><p>Iniciemos agora a implementação do nosso projeto. Mas antes vamos dar uma olhada em alguns conceitos.</p><h3 id="Test-Driven-Development-TDD"><a href="#Test-Driven-Development-TDD" class="headerlink" title="Test Driven Development (TDD)"></a>Test Driven Development (TDD)</h3><p>Neste momento, leitor, você deve estar se perguntando: “Não deveríamos escrever primeiro o nosso código e depois escrever os testes?”.</p><p>Não necessariamente. O processo de escrever os testes antes do código é chamado de <code>TDD -  Test Driven Development</code>. Segundo a <a href="https://pt.wikipedia.org/wiki/Test_Driven_Development">wikipedia</a>:</p><blockquote><p>“Test Driven Development (TDD) ou em português Desenvolvimento guiado por testes é uma técnica de desenvolvimento de software que baseia em um ciclo curto de repetições: Primeiramente o desenvolvedor escreve um caso de teste automatizado que define uma melhoria desejada ou uma nova funcionalidade. Então, é produzido código que possa ser validado pelo teste para posteriormente o código ser refatorado para um código sob padrões aceitáveis. Kent Beck, considerado o criador ou o ‘descobridor’ da técnica, declarou em 2003 que TDD encoraja designs de código simples e inspira confiança[1] . Desenvolvimento dirigido por testes é relacionado a conceitos de programação de Extreme Programming, iniciado em 1999,[2] mas recentemente tem-se criado maior interesse pela mesma em função de seus próprios ideais.[3] Através de TDD, programadores podem aplicar o conceito de melhorar e depurar código legado desenvolvido a partir de técnicas antigas.[4]”</p></blockquote><h3 id="Criando-o-setup-py"><a href="#Criando-o-setup-py" class="headerlink" title="Criando o setup.py"></a>Criando o setup.py</h3><p>Antes de começar a implementar o códigos de teste, vamos criar o arquivo <code>setup.py</code>. Esse arquivo contém informações sobr e o nosso módulo python e facilita em muito a utilização dos testes. Então, vamos criar o arquivo <code>setup.py</code> na pasta raiz do nosso projeto.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> setup.py</span><br></pre></td></tr></table></figure><p>A estrutura do nosso projeto agora está assim:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── codigo_avulso_test_tutorial</span><br><span class="line">│   ├── circulo.py</span><br><span class="line">│   ├── figura_geometrica.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── quadrado.py</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── setup.py</span><br><span class="line">└── test</span><br><span class="line">    ├── circulo_test.py</span><br><span class="line">    ├── figura_geometrica_test.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── quadrado_test.py</span><br></pre></td></tr></table></figure><p>Abra o <code>setup.py</code> em um editor e adicione as informações conforme exemplo abaixo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;codigo-avulso-test-tutorial&#x27;</span>,</span><br><span class="line">    packages=[<span class="string">&#x27;codigo_avulso_test_tutorial&#x27;</span>, <span class="string">&#x27;test&#x27;</span>],</span><br><span class="line">    test_suite=<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>No código acima, <code>name</code> representa o nome do seu projeto, <code>packages</code> são os diretórios do seu projeto que possuem código fonte e <code>test_suite</code> indica o diretório onde estão os fontes de teste. É importante declarar esse diretório pois o Unittest irá procurar dentro dele os arquivos de teste que iremos escrever.</p><h3 id="Criando-testes-para-a-classe-FiguraGeometrica"><a href="#Criando-testes-para-a-classe-FiguraGeometrica" class="headerlink" title="Criando testes para a classe FiguraGeometrica"></a>Criando testes para a classe FiguraGeometrica</h3><p>Agora, vamos usar a lógica do TDD. Primeiro criamos o código de teste de uma classe para em seguida criamos o código da mesma. Das classes que criamos, o arquivo <code>figura_geometrica.py</code> servirá como uma classe base para as outras classes. Então vamos começar por elá.</p><p>Abra o arquivo <code>figura_geometrica_test.py</code> e seu editor preferido e adicione o código abaixo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> codigo_avulso_test_tutorial.figura_geometrica <span class="keyword">import</span> FiguraGeometrica</span><br><span class="line"></span><br><span class="line"><span class="comment"># O nome da classe deve iniciar com a palavra Test</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestFiguraGeometrico</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Serve para incializar variavei que usaremos</span></span><br><span class="line">    <span class="comment"># globalmente nos testes</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        TestCase.setUp(self)</span><br><span class="line">        self.fig = FiguraGeometrica()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna uma NotImplementedError</span></span><br><span class="line">    <span class="comment"># O nome do metodo deve comecar com test</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_area</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertRaises(NotImplementedError, self.fig.get_area)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna uma NotImplementedError</span></span><br><span class="line">    <span class="comment"># O nome do metodo deve comecar com test</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_perimetro</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertRaises(NotImplementedError, self.fig.get_perimetro)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Como podemos observar no código acima, a seguinte linha:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_area</span>(<span class="params">self</span>):</span><br><span class="line">    self.assertRaise(self.fig.test_get_area(), NotImplementedError)</span><br></pre></td></tr></table></figure><p>Realiza o seguinte teste. Com o objeto <code>self.fig</code> criado no método <code>setUp()</code>, tentamos chamar o método <code>test_get_perimetro</code> da classe <code>FiguraGeometrica</code>, porém ele verifica se ocorreu a exceção <code>NotImplementedError</code>. Isso é feito porque a classe <code>FiguraGeometrica</code> é uma classe abstrata e possui ambos os métodos <code>get_area</code> e <code>get_perimetro</code> vazios. Isso irá ficar mais claro quando adicionarmos o código da classe <code>FiguraGeometrica</code>. Então, abra o arquivo <code>figura_geometrica.py</code> em seu editor e vamos adicionar o seguinte código:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FiguraGeometrica</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna a area da figura</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna o perimetro da figura</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimetro</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A class acima é bem simples. Ela possui um método que retorna a área e outro que retorna o perímetro da figura. Ambos são métodos <em>abstratos</em>, ou seja, devem ser implementados nas classes filhas da classe <code>FiguraGeometrica</code>. Se criarmos um objeto dessa classe e chamarmos um dos dois métodos, uma exceção do tipo <code>NotImplementedError</code> será lançada, pois ambos os métodos possuem escopo vazio.</p><p>Finalmente podemos executar o teste da nossa classe. Usando o terminal, no diretorio em que o arquivo <code>setup.py</code> está, execute o seguinte comando:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Esse nosso comando vai executar a nossa classe <code>TestFiguraGeometrica</code>. Se tudo estiver correto, teremos a seguinte saída:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">running test</span><br><span class="line">running egg_info</span><br><span class="line">writing codigo_avulso_test_tutorial.egg-info/PKG-INFO</span><br><span class="line">writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt</span><br><span class="line">writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt</span><br><span class="line">reading manifest file &#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span><br><span class="line">writing manifest file &#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span><br><span class="line">running build_ext</span><br><span class="line">test_get_area (test.figura_geometrica_test.TestFiguraGeometrico) ... ok</span><br><span class="line">test_get_perimetro (test.figura_geometrica_test.TestFiguraGeometrico) ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>Caso apareça uma resposta diferente, dê uma olhada na própria saída do teste. Ele indica onde está o erro. Provavelmente, pode ter sido algum erro de digitação, pois os exemplos deste tutorial foram todos testados.</p><h3 id="Criando-testes-para-a-classe-Quadrado"><a href="#Criando-testes-para-a-classe-Quadrado" class="headerlink" title="Criando testes para a classe Quadrado"></a>Criando testes para a classe Quadrado</h3><p>Vamos criar agora outras classes que realmente fazem algo de útil e seus respectivos testes. Começando pela classe Quadrado, vamos escrever um teste para a mesma no arquivo <code>quadrado_test.py</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> codigo_avulso_test_tutorial.quadrado <span class="keyword">import</span> Quadrado</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestQuadrado</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        TestCase.setUp(self)</span><br><span class="line">        self.fig = Quadrado()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Verificamos se o resultado é o esperado</span></span><br><span class="line">        <span class="comment"># de acordo com a formula de area do quadrado</span></span><br><span class="line">        self.fig.lado = <span class="number">2</span></span><br><span class="line">        self.assertEqual(self.fig.get_area(), <span class="number">4</span>)</span><br><span class="line">        self.fig.lado = <span class="number">7.0</span></span><br><span class="line">        self.assertEqual(self.fig.get_area(), <span class="number">49.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_perimetro</span>(<span class="params">self</span>):</span><br><span class="line">        self.fig.lado = <span class="number">2</span></span><br><span class="line">        self.assertEqual(self.fig.get_perimetro(), <span class="number">8</span>)</span><br><span class="line">        self.fig.lado = <span class="number">7.0</span></span><br><span class="line">        self.assertEqual(self.fig.get_perimetro(), <span class="number">28.0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Em seguida, adicionamos o código da classe <code>Quadrado</code> no arquivo <code>quadrado.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> figura_geometrica <span class="keyword">import</span> FiguraGeometrica</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quadrado</span>(<span class="title class_ inherited__">FiguraGeometrica</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      self.lado = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna a area do quadrado</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lado**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna o perimetro do quadrado</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimetro</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> * self.lado</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Assim como fizemos no exemplo anterior, executamos os testes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Se tudo estiver certo, teremos a seguinte saída.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">running test</span><br><span class="line">running egg_info</span><br><span class="line">writing codigo_avulso_test_tutorial.egg-info/PKG-INFO</span><br><span class="line">writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt</span><br><span class="line">writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt</span><br><span class="line">reading manifest file &#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span><br><span class="line">writing manifest file &#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span><br><span class="line">running build_ext</span><br><span class="line">test_get_area (test.quadrado_test.TestQuadrado) ... ok</span><br><span class="line">test_get_perimetro (test.quadrado_test.TestQuadrado) ... ok</span><br><span class="line">test_get_area (test.figura_geometrica_test.TestFiguraGeometrico) ... ok</span><br><span class="line">test_get_perimetro (test.figura_geometrica_test.TestFiguraGeometrico) ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 4 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>Uma detalhe interessante a ser observado é que agora os testes da classe <code>Quadrado</code> estão sendo executados junto com os testes da classe <code>FiguraGeometrica</code> sem que fosse necessário alterar nenhuma configuração do projeto, ou adicionar algum novo diretório no arquivo <code>setup.py</code>. Isso acontece por que usamos a sufixo <code>_test</code> no nome dos nossos código fonte de teste e também adicionamos o diretório <code>test</code> na tag <code>test_suite</code> no arquivo <code>setup.py</code>. Desse modo, quando executamos os testes, o módulo python <code>Unittest</code> percorre o diretório <code>test</code>, carrega automaticamente todos os arquivos com sufixo <code>_test</code> e executa os testes dentro deles. Bacana não é?</p><h3 id="Criando-testes-para-a-classe-Circulo"><a href="#Criando-testes-para-a-classe-Circulo" class="headerlink" title="Criando testes para a classe Circulo"></a>Criando testes para a classe Circulo</h3><p>Para finalizarmos o tutorial, vamos agora implementar os testes da classe Círculo.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> codigo_avulso_test_tutorial.circulo <span class="keyword">import</span> Circulo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCirculo</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        TestCase.setUp(self)</span><br><span class="line">        self.fig = Circulo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Utilizamos a formula diretamente por conveniencia</span></span><br><span class="line">        <span class="comment"># já que math.pi e double e sendo assim, possui</span></span><br><span class="line">        <span class="comment"># muitas casas decimais</span></span><br><span class="line">        self.fig.raio = <span class="number">2</span></span><br><span class="line">        area = math.pi * self.fig.raio**<span class="number">2</span></span><br><span class="line">        self.assertEqual(self.fig.get_area(), area)</span><br><span class="line"></span><br><span class="line">        self.fig.raio = <span class="number">7.0</span></span><br><span class="line">        area = math.pi * self.fig.raio**<span class="number">2</span></span><br><span class="line">        self.assertEqual(self.fig.get_area(), area)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_perimetro</span>(<span class="params">self</span>):</span><br><span class="line">        self.fig.raio = <span class="number">2</span></span><br><span class="line">        perimetro = <span class="number">2</span> * math.pi * self.fig.raio</span><br><span class="line">        self.assertEqual(self.fig.get_perimetro(), perimetro)</span><br><span class="line"></span><br><span class="line">        self.fig.raio = <span class="number">7.0</span></span><br><span class="line">        perimetro = <span class="number">2</span> * math.pi * self.fig.raio</span><br><span class="line">        self.assertEqual(self.fig.get_perimetro(), perimetro)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>E agora a classe Circulo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> figura_geometrica <span class="keyword">import</span> FiguraGeometrica</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circulo</span>(<span class="title class_ inherited__">FiguraGeometrica</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      self.raio = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna a area do circulo</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.pi * self.raio**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retorna o perimetro do circulo</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimetro</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * math.pi * self.raio</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Finalmente, rodamos os testes agora com a presença da classe circúlo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Se tudo estiver certo, teremos a seguinte saída.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">running test</span><br><span class="line">running egg_info</span><br><span class="line">writing codigo_avulso_test_tutorial.egg-info/PKG-INFO</span><br><span class="line">writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt</span><br><span class="line">writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt</span><br><span class="line">reading manifest file &#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span><br><span class="line">writing manifest file &#x27;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&#x27;</span><br><span class="line">running build_ext</span><br><span class="line">test_get_area (test.quadrado_test.TestQuadrado) ... ok</span><br><span class="line">test_get_perimetro (test.quadrado_test.TestQuadrado) ... ok</span><br><span class="line">test_get_area (test.figura_geometrica_test.TestFiguraGeometrico) ... ok</span><br><span class="line">test_get_perimetro (test.figura_geometrica_test.TestFiguraGeometrico) ... ok</span><br><span class="line">test_get_area (test.circulo_test.TestCirculo) ... ok</span><br><span class="line">test_get_perimetro (test.circulo_test.TestCirculo) ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 6 tests in 0.001s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Com os testes ok, só nos resta subir o código para o github:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;[NEW] Adicionado classes e testes&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>Esse tutorial ficou bem extenso, mas espero que tenha sido útil pra vocês. No próxima parte do tutorial, vamos ver como configurar o Travis, para que ele execute nossos testes quando realizarmos um <code>push</code> ou um <code>pull request</code> para o github. Também veremos o Coveralls que emite relatórios do quando do seu código está coberto por testes, algo muito interessante para ver se um <em>software</em> é bem testado.</p><p>Os testes que escrevemos foram bem simples, apenas para fim de exemplo. Porém em uma aplicação séria, deve-se ter cuidado na hora de escrever os testes, de maneira a garantir que todas as possibilidades de erros sejam cobertas. A filosofia do TDD de escrever os testes antes do código da nossa aplicação, é algo que exige prática. Eu mesmo ainda não me sinto completamente a vontade seguindo esse fluxo de trabalho. Mas, escrever os testes primeiro te ajuda a manter seu código coerente e funcional, pois vocẽ vai precisar fazê-lo passar pelos testes.</p><p>É isso pessoal. Obrigado por ler até aqui. Até a próxima postagem!</p>]]></content>
      
      
      <categories>
          
          <category> Python com Unittest, Travis CI, Coveralls e Landscape </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> travis-ci </tag>
            
            <tag> coveralls </tag>
            
            <tag> landscape </tag>
            
            <tag> tdd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure seu ambiente de desenvolvimento com Ubuntu Make</title>
      <link href="/2016/03/2016-03-29-configurando-seu-ambiente-de-desenvolvimento-com-ubuntu-make/"/>
      <url>/2016/03/2016-03-29-configurando-seu-ambiente-de-desenvolvimento-com-ubuntu-make/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wiki.ubuntu.com/ubuntu-make">Ubuntu Make</a> é uma ferramenta de linha de comando que permite que você faça o download e instalação de das ferramentas de desenvolvimento mais populares, instalando também todas as suas dependências. O objetivo do <a href="https://wiki.ubuntu.com/ubuntu-make">Ubuntu Make</a> é possibilitar que, através de um comando, você tenha seu ambiente de desenvolvimento pronto para uso.<br>Ele possui suporte a instalação de IDE’s de diversas linguagens, ferramentas para desenvolvimento web frontend(javascript e dart), backend (go and dart), mobile (java e android sdk) e etc.</p><h3 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h3><p>A instalação depende da inclusão do ppa abaixo. Então, basta abrir o termial e entrar com os comando a seguir:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-make</span><br></pre></td></tr></table></figure><h3 id="Utilizando-o-Ubuntu-Make"><a href="#Utilizando-o-Ubuntu-Make" class="headerlink" title="Utilizando o Ubuntu Make"></a>Utilizando o Ubuntu Make</h3><h4 id="Categorias"><a href="#Categorias" class="headerlink" title="Categorias"></a>Categorias</h4><p>O <a href="https://wiki.ubuntu.com/ubuntu-make">Ubuntu Make</a> possui uma lista de plataformas suportadas que foram separadas por categorias para facilitar a vida do desenvolvedor na hora de instalar suas ferramentas preferidas.</p><p>As categorias existentes podem ser visualizadas com o comando abaixo.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umake --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>No presente momento, temos as seguites categorias. Novas ferramentas sempre estão sendo incluídas pela comunidade:</p><table><thead><tr><th>Categoria</th><th>Descrição</th></tr></thead><tbody><tr><td>games</td><td>Ambiente de desenvolvimento de games</td></tr><tr><td>web</td><td>Ambiente de desenvolvimento web</td></tr><tr><td>go</td><td>Suporte a linguagem Go</td></tr><tr><td>dart</td><td>Ambiente de desenvolvimento Dartlang</td></tr><tr><td>ide</td><td>IDE genéricas</td></tr><tr><td>android</td><td>Ambiente de desenvolvimento Android</td></tr><tr><td>swift</td><td>Suporte a linguagem Swift</td></tr><tr><td>scala</td><td>Suporte a linguagem Scala</td></tr><tr><td>rust</td><td>Suporte a linguagem  Rust</td></tr><tr><td>nodejs</td><td>Versão estável do Nodejs</td></tr></tbody></table><p>Se você desejar verificar as opções de uma sub-categoria, basta usar o comando a seguir:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umake android --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>Você encontrará as seguintes opções:</p><table><thead><tr><th>Categoria</th><th>Descrição</th></tr></thead><tbody><tr><td>android-ndk</td><td>Android NDK</td></tr><tr><td>android-sdk</td><td>Android SDK</td></tr><tr><td>android-studio</td><td>Android Studio (padrão)</td></tr></tbody></table><p>E assim você pode ir navegando nas subcategorias da ferramenta.</p><h4 id="Exemplos-de-uso"><a href="#Exemplos-de-uso" class="headerlink" title="Exemplos de uso"></a>Exemplos de uso</h4><p>O uso do Ubuntu Make é muito simples, o que o torna uma ferramenta muito valiosa. Como exemplo vamos realizar a instalação da IDE Netbeans. Basta executar o comando a seguir.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umake ide netbeans</span><br></pre></td></tr></table></figure><p>Basta aceitar os termos de uso, entrando com o texto “Eu aceito” e esperar download e instalação da IDE. Depois disso você já pode usá-la. As IDE e SDK’s normalmente são instalados nbo diretório <code>.local/share/umake/</code></p><p>A instalação do ambiente de desenvolvimento do Android também segue o mesmo princípio, porém possui uma categoria própria.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umake android android-sdk</span><br><span class="line">umake android android-studio</span><br></pre></td></tr></table></figure><p>Instalando a versão estável do nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umake nodejs</span><br></pre></td></tr></table></figure><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Bom, esses são alguns exemplos de uso do Ubuntu Make. Para mais informações você pode consultar a página oficial <a href="https://wiki.ubuntu.com/ubuntu-make">aqui</a>.</p><p>Obrigado por ler e até o próximo post! t+</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ferramentas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review - Guia Mangá de Banco de Dados</title>
      <link href="/2016/03/2016-03-20-sobre-o-livro-guia-manga-de-banco-de-dados/"/>
      <url>/2016/03/2016-03-20-sobre-o-livro-guia-manga-de-banco-de-dados/</url>
      
        <content type="html"><![CDATA[<p>Quando pensamos em mangás, imediatamente nomes como Naruto, One Piece e Cavaleiros do Zodíaco vem a nossa mente. Eu, como todo fã de quadrinhos, sempre procuro ler obras novas ou que me despertem a curiosidade. Grande surpresa foi a minha quando descobri que a editora Novatec, conhecida por seus livros técnicos, havia publicado um mangá. Foi aí que juntei a curiosidade (e um pouco de dinheiro) e resolvi adquirir um exemplar.</p><p>O mangá em questão é o livro <code>Guia Mangá de Banco de Dados</code>.</p><p align="center"><img src="https://user-images.githubusercontent.com/8174740/57082886-02599980-6cce-11e9-92b6-f6cc3c4bec00.jpg"></p><p>Com 224 páginas, o livro de autoria de Mana Takashi e Shoko Azuma, é a versão brasileira da obra da editora <code>Ohmsha</code> do Japão, e faz uso de uma narrativa típica de um mangá, com momentos muito cômicos sem abrir mão de uma história coerente (seguindo o conceito do mangá) e explicando muito bem a utilidade e o projeto de um banco de dados.</p><p>No mangá, acompanhamos a jornada da princesa Ruruna e de seu amigo Cain em busca de uma solução para o problema de registro das informações de venda, produção de mercadorias e exportação do seu reino. Os pais de Ruruna querem apenas saber de se divertir e deixam nas mão da princesa a tarefa de organizar a bagunça. Nesse ponto, através da orientação da fada Tica, uma <code>Fada Mágica dos Bancos de Dados</code> (apele para ela durante a prova de DB), Ruruna e Cain irão encontrar uma solução para o armazenamento e gerenciamento de informações sobre a produção do reino.</p><p align="center"><img src="https://user-images.githubusercontent.com/8174740/57082960-26b57600-6cce-11e9-9426-a38cbca8f8f0.jpg"></p><p>O livro consegue de maneira muito interessante demonstrar todos os passos da implantação de um sistema, desde da análise do problemas do atual sistema de armazenamento de informações usado pelo reino, o estudo do porquê um banco de dados ser uma solução certeira até o planejamento de como será o sistema, como definição das tabelas, atributos e etc. O livro aborda pontos como o problema com informações duplicadas e gerenciamento de sistema descentralizado, onde não existe controle sobre a validade das informações inseridas no sistema.</p><p>Todos os conceitos envolvendo banco de dados são abordados de uma maneira simples, porém prática. Conceitos como tabelas, Entidade-Relacionamento, consultas e atualização de dados são visitados pela fada Tica. Entre um conceito e outro, a história das personagens vão se desenvolvendo, contextualizando muito bem as lições ensinadas. Outro ponto positivo do livro são os desenhos, que apesar de simples, possuem traços suaves e agradáveis de ver.</p><p align="center"><img src="https://user-images.githubusercontent.com/8174740/57083031-48166200-6cce-11e9-977f-a3157b93972a.jpg"></p><p>Eu cursei a disciplina de Banco de Dados durante minha graduação e consegui relembrar muito pontos importantes sobre Banco de Dados e até mesmo aprender coisas novas, graças ao ponto de vista utilizado pelo livro (bem diferente do usado em uma sala de aula). Então, se você é um estudante de TI, um entusiasta da tecnologia, curte ler quadrinhos ou mesmo ficou curioso, eu recomendo o livro.</p><p>Este livro abriu minha curiosidade para comprar o guia mangá de outras temas e pretendo fazer análise de cada um deles assim que terminar de lê-los.</p><p>É isso. Obrigado por ler e até a próximo <em>post</em>.</p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> review </tag>
            
            <tag> livro </tag>
            
            <tag> banco de dados </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backup e Restore de um banco de dados PostgreSQL</title>
      <link href="/2016/03/2016-03-18-backup-e-restore-de-um-banco-postgresql/"/>
      <url>/2016/03/2016-03-18-backup-e-restore-de-um-banco-postgresql/</url>
      
        <content type="html"><![CDATA[<p>Quando trabalhamos com alguma aplicações que faz uso de um banco de dados, muitas vezes precisamos realizar um <code>backup</code> do nosso banco (antes de alguma atualização importante na aplicação) ou executar o <code>restore</code> desse banco caso seja necessário.</p><p>Eu trabalhei por um tempo desenvolvendo funcionalidades para o ERP Odoo. Esse ERP faz uso do PostgreSQL, e frequentemente eu precisava realizar <code>backup</code> e <code>restore</code> dos bancos que criava para atualizar as máquinas dos clientes. Então, segue abaixo o procedimento que eu utilizava.</p><h2 id="Backup"><a href="#Backup" class="headerlink" title="Backup"></a>Backup</h2><p>Para realizar o <code>backup</code>, primeiro precisamos logar como usuário <code>postgres</code>. No terminal entre com:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres</span><br></pre></td></tr></table></figure><p>Uma vez logado, voce pode reparar que o nome de usuário no terminal mudou. Caso seja necessário, é possível visualizar a lista de bancos existentes na sua máquina através do comando abaixo:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql <span class="operator">-</span>l</span><br></pre></td></tr></table></figure><p>Agora, vamos realizar o backup do banco com o seguinte comando:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump <span class="operator">-</span>Fc nome_banco <span class="operator">&gt;</span> nome_banco_backup.dump</span><br></pre></td></tr></table></figure><p>Assim será criado um arquivo com a extensão <code>.dump</code> no diretório <code>/var/lib/postgressql</code>.</p><p>Também podemos incrementar o comando de modo a deixarmos registrado o dia, hora e minuto em que o <code>backup</code> foi realizado, algo muito útil caso você precise realizar a restauração do banco.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump <span class="operator">-</span>Fc nome_banco <span class="operator">&gt;</span> nome_banco<span class="operator">-</span>backup<span class="operator">-</span>`<span class="type">date</span> <span class="operator">+</span><span class="operator">%</span>Y<span class="operator">-</span><span class="operator">%</span>m<span class="operator">-</span><span class="operator">%</span>d<span class="operator">-</span><span class="operator">%</span>H<span class="operator">-</span><span class="operator">%</span>M`.dump</span><br></pre></td></tr></table></figure><h2 id="Restore"><a href="#Restore" class="headerlink" title="Restore"></a>Restore</h2><p>A restauração do banco é tão simples quanto o <code>backup</code>.<br>Primeiramente, vamos criar uma entrada para o banco que será restaurado.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb banco_do_cliente_x</span><br></pre></td></tr></table></figure><p>Apenas uma observação, antes de criar uma entrada para o novo banco, é uma boa prática verificar se já não existe outro banco com o mesmo nome. Isso pode ser feito com o comando <code>psql -l</code>.</p><p>Caso o seu objetivo seja mesmo substituir o banco <code>banco_do_cliente_x</code>, você pode usar o comando abaixo:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dropdb banco_do_cliente_x</span><br><span class="line">createdb banco_do_cliente_x</span><br></pre></td></tr></table></figure><p>Finalmente realizamos o <code>restore</code> do banco com o comando:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_restore <span class="operator">-</span>d banco_do_cliente_x banco_backup.dump</span><br></pre></td></tr></table></figure><p>Vale lembrar que para executar o comando acima, o arquivo .dump deve estar no diretório <code>/var/lib/postgressql</code> (mova o arquivo para esse diretório caso ele ainda não esteja).</p><p>É isso pessoal. Esse dica já me salvou muito vezes e espero que seja útil para vocês também.</p><p>Até o próximo post!</p>]]></content>
      
      
      <categories>
          
          <category> Banco de Dados </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> backup </tag>
            
            <tag> restore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crie diretórios e arquivos usando expressões regulares</title>
      <link href="/2014/08/2014-08-30-criando-diretorios-e-arquivos-com-nomes/"/>
      <url>/2014/08/2014-08-30-criando-diretorios-e-arquivos-com-nomes/</url>
      
        <content type="html"><![CDATA[<p>Todo programador linux sabe como o uso do terminal pode ser uma ajuda insubstituível na realização de algumas tarefas. Neste post eu irei compartilhar algumas coisa que descobri usando o terminal.</p><h2 id="Exemplo-1"><a href="#Exemplo-1" class="headerlink" title="Exemplo 1"></a>Exemplo 1</h2><p>Para começar, quando desejamos criar um diretório pelo terminal, usamos o seguinte comando:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nome_do_diretorio</span><br></pre></td></tr></table></figure><p>Algo muito prático. Mas e se precisarmos criar 10 diretórios com o seguinte formato de nome: <code>minha_pasta_01</code>, <code>minha_pasta_02</code>, <code>minha_pasta_03</code>, …, <code>minha_pasta_10</code>.</p><p>Certamente a realização dessa tarefa pelo ambiente gráfico é algo muito cansativo e lento. Então vamos fazer uso do terminal do linux para resolver essa situação.</p><p>Você talvez não saiba (eu pelo menos não sabia.. hehe), que o comando <code>mkdir</code> aceita expressões regulares. Então, vamos usar-las para resolver nosso problema.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir minha_pasta_&#123;01..10&#125;</span><br></pre></td></tr></table></figure><p>Dentro da <code>&#123;&#125;</code>, nós inserimos a expressão regular desejada. A expressão <code>&#123;01..10&#125;</code> irá criar <code>10</code> diretórios seguindo o padrão de nomes desejado.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── minha_pasta_01</span><br><span class="line">├── minha_pasta_02</span><br><span class="line">├── minha_pasta_03</span><br><span class="line">├── minha_pasta_04</span><br><span class="line">├── minha_pasta_05</span><br><span class="line">├── minha_pasta_06</span><br><span class="line">├── minha_pasta_07</span><br><span class="line">├── minha_pasta_08</span><br><span class="line">├── minha_pasta_09</span><br><span class="line">└── minha_pasta_10</span><br></pre></td></tr></table></figure><p>Para deletarmos os diretórios que acabamos de criar também podemos usar a mesma expressão regular.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf minha_pasta_&#123;1-10&#125;</span><br></pre></td></tr></table></figure><h2 id="Exemplo-2"><a href="#Exemplo-2" class="headerlink" title="Exemplo 2"></a>Exemplo 2</h2><p>Vamos criar 5 arquivos com o seguinte formato de nome: <code>arquivo_”numero_do_arquivo”.txt</code>. Basta no terminal, usarmos o comando <code>touch</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch arquivo_&#123;1..5&#125;.txt</span><br></pre></td></tr></table></figure><p>Apos executarmos o comando, <code>5</code> arquivos do tipo <code>.txt</code> serão criados seguindo a regra de nome que desejamos.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── arquivo_1.txt</span><br><span class="line">├── arquivo_2.txt</span><br><span class="line">├── arquivo_3.txt</span><br><span class="line">├── arquivo_4.txt</span><br><span class="line">├── arquivo_5.txt</span><br></pre></td></tr></table></figure><h2 id="Exemplo-3"><a href="#Exemplo-3" class="headerlink" title="Exemplo 3"></a>Exemplo 3</h2><p>Vamos criar um conjunto de arquivos cujos nomes seguem o formato: <code>arquivo_a.txt</code>, <code>arquivo_b.txt</code>, … <code>arquivo_z.txt</code>. Basta executar o seguinte comando no terminal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch arquivo_&#123;a..z&#125;.txt</span><br></pre></td></tr></table></figure><p>Resultado:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── arquivo_a.txt</span><br><span class="line">├── arquivo_b.txt</span><br><span class="line">├── arquivo_c.txt</span><br><span class="line">├── arquivo_d.txt</span><br><span class="line">├── arquivo_e.txt</span><br><span class="line">├── arquivo_f.txt</span><br><span class="line">├── arquivo_g.txt</span><br><span class="line">├── arquivo_h.txt</span><br><span class="line">├── arquivo_i.txt</span><br><span class="line">├── arquivo_j.txt</span><br><span class="line">├── arquivo_k.txt</span><br><span class="line">├── arquivo_l.txt</span><br><span class="line">├── arquivo_m.txt</span><br><span class="line">├── arquivo_n.txt</span><br><span class="line">├── arquivo_o.txt</span><br><span class="line">├── arquivo_p.txt</span><br><span class="line">├── arquivo_q.txt</span><br><span class="line">├── arquivo_r.txt</span><br><span class="line">├── arquivo_s.txt</span><br><span class="line">├── arquivo_t.txt</span><br><span class="line">├── arquivo_u.txt</span><br><span class="line">├── arquivo_v.txt</span><br><span class="line">├── arquivo_w.txt</span><br><span class="line">├── arquivo_x.txt</span><br><span class="line">├── arquivo_y.txt</span><br><span class="line">└── arquivo_z.txt</span><br></pre></td></tr></table></figure><h2 id="Exemplo-4"><a href="#Exemplo-4" class="headerlink" title="Exemplo 4"></a>Exemplo 4</h2><p>Vamos criar um conjunto de arquivo cujo nomes seguem o seguinte formato: <code>a1.txt</code>, <code>a2.txt</code>, <code>a3.txt</code>, …, <code>a5.txt</code>, <code>b1.txt</code>, <code>b2.txt</code>, …, <code>b5.txt</code>. Basta executar o seguinte comando no terminal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch &#123;a-b&#125;&#123;1-5&#125;.txt</span><br></pre></td></tr></table></figure><p>A seguir temos os arquivos que foram criados pela execução da expressão regular.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── a1.txt</span><br><span class="line">├── a2.txt</span><br><span class="line">├── a3.txt</span><br><span class="line">├── a4.txt</span><br><span class="line">├── a5.txt</span><br><span class="line">├── b1.txt</span><br><span class="line">├── b2.txt</span><br><span class="line">├── b3.txt</span><br><span class="line">├── b4.txt</span><br><span class="line">├── b5.txt</span><br></pre></td></tr></table></figure><p>Como podemos perceber, dentro da <code>&#123;&#125;</code> podemos adicionar qualquer expressão regular.</p><p>É isso pessoal. Espero que a dica seja útil para vocês. Até o próximo post.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> regex </tag>
            
            <tag> mkdir </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QChip8 Emulator: meu primeiro emulador</title>
      <link href="/2014/06/2014-06-24-qchip8-emulator-meu-primeiro-emulador/"/>
      <url>/2014/06/2014-06-24-qchip8-emulator-meu-primeiro-emulador/</url>
      
        <content type="html"><![CDATA[<p>Se há algo na área de games que sempre me chamou a atenção, sem dúvida, são os emuladores. Sempre achei fantástico a ideia de poder rodar jogos e aplicativos de um sistema em outro sistema totalmente diferente. Então, semanas atrás resolvi estudar um pouco sobre esse tipo de aplicação. Após algumas pesquisas, vi que criar um emulador para o CHIP8 é um ótimo passo para quem não possui experiência em desenvolvimento de emuladores, devido a sua simplicidade.</p><p><img src="/images/mstuttgart/snapshot_8.png"></p><p><a href="http://en.wikipedia.org/wiki/CHIP-8">CHIP8</a> é uma linguagem de programação interpretada usada na década de 70 nos computadores COSMAP VIP e TELMAC 1800. Os programas em CHIP8 são executados sobre uma máquina virtual própria. Assim, o emulador que implementei é na verdade um emulador dessa máquina virtual, e não dos computadores onde ela rodava. A linguagem foi muito usada por entusiastas em desenvolvimento de games.</p><p><img src="/images/mstuttgart/snapshot_9.png"></p><p>O <a href="https://github.com/mstuttgart/qchip8-emulator">QChip8 Emulator</a> foi implementado usando C++ para as rotinas de emulação e Qt para a interface. O emulador ainda não tem som, o que não atrapalha em nada a diversão já que o som do CHIP8 original era um simples tom.  Todos os jogos do CHIP8 são em preto-e-branco, então implementei vários temas de cores para quem não gostar do tema clássico. As Roms dos jogos do CHIP8 são gratuitas e podem ser encontrados fazendo uma simples busca no Google por <code>&quot;CHIP8 roms&quot;</code>.</p><p><img src="/images/mstuttgart/snapshot_10.png"></p><p>Futuramente pretendo escrever uma série de tutoriais demonstrando os passos para criar um emulador do CHIP8 (e quem sabe, de outros emuladores também).</p><p>Se você já tem experiência em programação é não quer esperar meus tutoriais, segue os links que usei para estudar:</p><ul><li><a href="http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/">How to write an emulator chip 8 interpreter</a></li><li><a href="http://www.emulator101.com.s3-website-us-east-1.amazonaws.com/introduction-to-chip-8/">Introduction to chip 8</a></li><li><a href="http://devernay.free.fr/hacks/chip8/C8TECH10.HTM">Cowgod’s Chip 8</a></li></ul><p>Aqui você pode conferir mais informações do <a href="https://github.com/mstuttgart/qchip8-emulator">QChip8 Emulator</a>.</p><p>Segue o link do emulador para quem desejar estudá-lo e&#x2F;ou usá-lo: clique <a href="https://github.com/mstuttgart/qchip8-emulator">aqui</a>.<br>Futuramente pretendo também disponibilizar uma pacote <code>.deb</code> e <code>.rmp</code> para distribuições Linux.</p><p>É isso pessoal. Até a próxima!</p>]]></content>
      
      
      <categories>
          
          <category> Meus Projetos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emulador </tag>
            
            <tag> chip8 </tag>
            
            <tag> projeto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ícones para Ubuntu, Linux Mint e derivados</title>
      <link href="/2014/06/2014-06-20-icon-theme-no-ubuntu-linux/"/>
      <url>/2014/06/2014-06-20-icon-theme-no-ubuntu-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="Numix-Icon-Theme-Circle"><a href="#Numix-Icon-Theme-Circle" class="headerlink" title="Numix Icon Theme Circle"></a>Numix Icon Theme Circle</h3><p>Versão do tema de ícone <a href="https://numixproject.org/">Numix</a> com ícones arredondados.</p><p><img src="/images/mstuttgart/snapshot_5.png"></p><p>Inicialmente, adicionamos o repositório do tema. Abra o terminal e digite:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:numix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install numix-icon-theme-circle</span><br></pre></td></tr></table></figure><p>Para conhecer a página do projeto, clique <a href="https://numixproject.org/">aqui</a>.</p><h3 id="Ardis-Icon-Theme"><a href="#Ardis-Icon-Theme" class="headerlink" title="Ardis Icon Theme"></a>Ardis Icon Theme</h3><p>Um dos meus temas de ícones preferidos.</p><p><img src="/images/mstuttgart/snapshot_6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab/icons</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ardis-icons</span><br></pre></td></tr></table></figure><p>Para conhecer a página do projeto, clique <a href="https://github.com/skwerlman/Ardis-icon-theme">aqui</a>.</p><h3 id="Humanity-Colors-Icon-Theme"><a href="#Humanity-Colors-Icon-Theme" class="headerlink" title="Humanity Colors Icon Theme"></a>Humanity Colors Icon Theme</h3><p>Temas de ícones Humanity em diversas cores.</p><p><img src="/images/mstuttgart/snapshot_7.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ravefinity-project/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install humanity-colors</span><br></pre></td></tr></table></figure><p>Para conhecer a página do projeto, clique <a href="http://www.ravefinity.com/p/humanity-colors-icon-theme.html">aqui</a>.</p><p>É isso pessoal. Até a próxima.</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> temas </tag>
            
            <tag> icones </tag>
            
            <tag> ardis </tag>
            
            <tag> numix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#5 - Operadores Bit-a-Bit: Operador SHIFT</title>
      <link href="/2014/06/2014-06-19-operadores-bit-bit-parte-5-de-5/"/>
      <url>/2014/06/2014-06-19-operadores-bit-bit-parte-5-de-5/</url>
      
        <content type="html"><![CDATA[<p>Neste ultimo tutorial sobre os operadores Bit-a-Bit, vamos falar sobre o operador <code>SHIFT</code>. O operador SHIFT serve para deslocarmos os bits de um número para esquerda ou para direita uma determinada quantidade de vezes. Embora pareça algo sem simples, esse deslocamento possui muitas aplicações. É o que veremos a seguir.</p><h2 id="SHIFT-Esquerdo"><a href="#SHIFT-Esquerdo" class="headerlink" title="SHIFT Esquerdo (&lt;&lt;)"></a>SHIFT Esquerdo (&lt;&lt;)</h2><p>O SHIFT Esquerdo (<code>&lt;&lt;</code>) desloca para esquerda todos os bits de um número um determinado número de vezes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>Valor de saída é <code>10</code> decimal ou <code>00001010</code> em binário.</p><p>Ao observarmos o valor de <code>c</code>, percebemos que ele dobrou. Esse detalhe está relacionado com uma das aplicações mais comuns do operador <code>SHIFT Esquerdo</code>: a multiplicação.</p><p>Toda vez que utilizamos o operador <code>&lt;&lt;</code> obtemos como resultado um valor equivalente ao operando multiplicado por 2 elevado ao número de deslocamentos, ou seja:</p><blockquote><p>x &lt;&lt; n* é o mesmo que x * 2^n</p></blockquote><p>As operações de multiplicação e divisão são operações custosas para o processador, sendo uma das que levam mais tempo (ou ciclos) para serem completadas. Quando necessitamos executar operações de multiplicação por valores que são potência de 2, podemos usar o operador <code>&lt;&lt;</code> que é uma operação mais rápida que a multiplicação usando o operador <code>*</code> e nos devolve o mesmo resultado.</p><h2 id="SHIFT-Direito"><a href="#SHIFT-Direito" class="headerlink" title="SHIFT Direito (&gt;&gt;)"></a>SHIFT Direito (&gt;&gt;)</h2><p>O SHIFT para direita (<code>&gt;&gt;</code>) desloca para direita todos os bits de um número um determinado número de vezes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a &gt;&gt; <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>A saída é <code>2</code> decimal ou <code>00000010</code> em binário.</p><p>Assim como o SHIFT Esquerdo, o <code>SHIFT Direito</code> pode realizar operações aritméticas, porém neste caso ele realiza a divisão (inteira) do operando por uma potência de 2. No exemplo acima podemos perceber que a variável c recebeu o parte inteira da divisão de <code>5</code> por <code>2^1</code>.</p><blockquote><p>x &gt;&gt; n* é o mesmo que x &#x2F; 2^n</p></blockquote><p>O operador SHIFT ainda possui diversos exemplos de uso, então não deixe de procurá-los.</p><p>Espero que essa série de tutoriais tenha lhe ajudado a entender mais sobre essas ferramentas interessante s que são os operadores Bit-a-Bit.</p><p>Obrigado por ler! Até o próximo post.</p>]]></content>
      
      
      <categories>
          
          <category> Operadores Bit-a-Bit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> binario </tag>
            
            <tag> bit-a-bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#4 - Operadores Bit-a-Bit: Operador NOT</title>
      <link href="/2014/06/2014-06-09-operadores-bit-bit-parte-4-de-5/"/>
      <url>/2014/06/2014-06-09-operadores-bit-bit-parte-4-de-5/</url>
      
        <content type="html"><![CDATA[<p>Mais um capítulo do nosso tutorial sobre operadores lógicos e operações bit-a-bit.<br>Hoje veremos o operador <code>NOT</code>.</p><h2 id="Operador-NOT"><a href="#Operador-NOT" class="headerlink" title="Operador NOT"></a>Operador NOT</h2><p>O operador <code>NOT (~)</code>, talvez seja o mais simples de todos. Diferente dos outros operadores Bit-a-Bit, o operador NOT opera apenas sobre um operando, invertendo o estado de cada bit, ou seja, se o bit for <code>1</code> ele será mudado para <code>0</code>, e vice-versa.</p><table><thead><tr><th align="center">Bit</th><th align="center">Saída</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td></tr></tbody></table><h3 id="Exemplo"><a href="#Exemplo" class="headerlink" title="Exemplo"></a>Exemplo</h3><p>Abaixo temos um exemplo de uso do operador <code>NOT</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = ~a;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>Saída igual a <code>250</code> decimal ou <code>11111010</code> binário.</p><p>Um dos mais comuns usos do operador NOT é para encontrar o <code>complemento de 2</code> de um número binário. Em um número binário de 8 bits conseguimos representar valores de <code>0</code> a <code>255</code> (<code>11111111</code> em binário), considerando que estamos trabalhando com número absolutos, ou seja, maiores ou iguais a zero . Entretanto, quando desejamos representar valores negativos e positivos usando valores binários devemos usar o complemento de 2. Desse modo, o nosso intervalo de representação de 8 bits diminui o valor positivo máximo, mas por outro lado, conseguimos representar números negativos. Sendo assim nossos valores vão de <code>-128</code> a <code>127</code>.</p><h3 id="Exemplo-2"><a href="#Exemplo-2" class="headerlink" title="Exemplo 2"></a>Exemplo 2</h3><p>Para encontrarmos o <code>complemento de 2</code> (o valor negativo) de um número usando o operador NOT, seguimos os seguintes passos:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = ~a + <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>Saída igual a <code>-5</code> decimal ou <code>11111011</code> binário.</p><p>Os números em complemento de 2, quando são negativos, sempre possuem seu bit mais significativo (bit mais à direita) com o valor <code>1</code>. A principal vantagem de usarmos essa técnica é que as regras para as operação de soma e de subtração são as mesmas, ou seja, se desejamos subtrair um número <code>b</code> de outro número <code>a</code>, basta simplesmente somar-lo ao complemento de 2 de <code>b</code>.</p><p>É isso pessoal. Até o próximo tutorial.</p>]]></content>
      
      
      <categories>
          
          <category> Operadores Bit-a-Bit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> binario </tag>
            
            <tag> bit-a-bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#3 - Operadores Bit-a-Bit: Operador XOR</title>
      <link href="/2014/06/2014-06-09-operadores-bit-bit-parte-3-de-5/"/>
      <url>/2014/06/2014-06-09-operadores-bit-bit-parte-3-de-5/</url>
      
        <content type="html"><![CDATA[<p>Continuando a nossa série de tutoriais, hoje veremos o operador XOR (<code>^</code>) ou como é conhecido, <code>OU-Exclusivo</code>.</p><h2 id="Operador-XOR"><a href="#Operador-XOR" class="headerlink" title="Operador XOR"></a>Operador XOR</h2><p>Como o próprio nome sugere, o <code>XOR</code> é um tipo especial de operação OR.<br><code>XOR (^)</code> é um operando binário que executa uma operação <code>XOR (ou-exclusivo)</code> com cada par de bits dos operandos. O bit resultante é <code>1</code> apenas se os dois bits operandos forem diferentes; caso contrário o resultante é <code>0</code>.</p><table><thead><tr><th align="left">Bit 1</th><th align="left">Bit 2</th><th align="left">Saída</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">0</td></tr></tbody></table><h3 id="Exemplo"><a href="#Exemplo" class="headerlink" title="Exemplo"></a>Exemplo</h3><p>O <code>operador XOR</code> utilizado quando desejamos uma verificar se cada um dos bits de um par de operandos são realmente diferentes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">9</span>; <span class="comment">// 00001001</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a ^ b;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>A saída é <code>12</code> decimal ou <code>00001100</code> binário.</p><p>Eu não encontrei exemplos mais genéricos de uso do XOR. Se você, leitor, souber algum não deixe de postar nos comentários.</p><p>Obrigado por ler e até o próximo tutorial.</p>]]></content>
      
      
      <categories>
          
          <category> Operadores Bit-a-Bit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> binario </tag>
            
            <tag> bit-a-bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#2 - Operadores Bit-a-Bit: Operador OR</title>
      <link href="/2014/06/2014-06-05-operadores-bit-bit-parte-2-de-5/"/>
      <url>/2014/06/2014-06-05-operadores-bit-bit-parte-2-de-5/</url>
      
        <content type="html"><![CDATA[<p>No tutorial <a href="https://mstuttgart.github.io/2014/06/05/2014-06-04-operadores-bit-bit-parte-1-de-5/">anterior</a>, realizamos um estudo sobre o <code>operador AND</code> e seus exemplos de uso.</p><p>Agora vamos prosseguir mostrando alguns exemplos de uso do <code>operador OR</code>.</p><h2 id="Operador-OR"><a href="#Operador-OR" class="headerlink" title="Operador OR"></a>Operador OR</h2><p>O <code>operador OR (|)</code> é um operador binário que executa uma operação <code>OR</code> com cada par de bits dos operandos. O bit resultante é <code>0</code> se os dois bits operandos forem 0; caso contrário o bit resultante é <code>1</code>.</p><table><thead><tr><th align="left">Bit 1</th><th align="left">Bit 2</th><th align="left">Saída</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">1</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">9</span>; <span class="comment">// 00001001</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a | b;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>A saída é <code>13</code> em decimal ou <code>00001101</code> em binário.</p><p>De maneira semelhante ao operador AND, o operador OR também pode ser usado para definir um valor específico para um determinado bit. Só que ao contrário do AND, que era usado para <code>&quot;desligar&quot;</code> um dado bit, o operador OR é usado para <code>&quot;ligá-lo&quot;</code>, ou seja, torna-lo igual a <code>1</code>.</p><h3 id="Exemplo"><a href="#Exemplo" class="headerlink" title="Exemplo"></a>Exemplo</h3><p>Vamos ligar o quarto bit do valor armazenado em a;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">0b00001000</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a | b;</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>A saída é <code>13</code> decimal ou <code>00001101</code> binário.</p><p>Observe que após essa operação, nós conseguimos <code>&quot;ligar&quot;</code> o quarto bit enquanto todos os outros bits continuam com seus valores iniciais.</p><p>É isso pessoal. Esse tutorial foi mais simples porque a maior parte dos detalhes e explicações eu já havia adicionado na parte 1.</p><p>Até o próximo tutorial.</p>]]></content>
      
      
      <categories>
          
          <category> Operadores Bit-a-Bit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> binario </tag>
            
            <tag> bit-a-bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#1 - Operadores Bit-a-Bit: Operador AND</title>
      <link href="/2014/06/2014-06-04-operadores-bit-bit-parte-1-de-5/"/>
      <url>/2014/06/2014-06-04-operadores-bit-bit-parte-1-de-5/</url>
      
        <content type="html"><![CDATA[<h2 id="Sobre"><a href="#Sobre" class="headerlink" title="Sobre"></a>Sobre</h2><p>Operadores Bit-a-Bit  são usados quando desejamos manipular diretamente os bits de um determinado número. Seu uso é muito fundamental em aplicações onde precisamos lidar diretamente com bits, como aplicações envolvendo hardware (Arduino, por exemplo) e até mesmo emuladores. Os exemplos estão em C++, mas podem ser facilmente adaptados para outras linguagens. Para fins de organização, pretendo dividir os tutoriais em 5 partes, cada um deles abordando um operador (AND, OR, XOR, NOT e SHIFT) e mostrando exemplos de uso.</p><p>Para se trabalhar com os operadores bit-a-bit, nossos dados devem ser valores numéricos, não-negativos e inteiros. As variáveis devem ser do tipo unsigned, como por exemplo, unsigned short ( 16 bits ) e unsigned char (8 bits ou 1 byte), dependendo do número de bits que você precisar.</p><h2 id="Operador-AND"><a href="#Operador-AND" class="headerlink" title="Operador AND"></a>Operador AND</h2><p>O operador <code>AND (&amp;)</code> é um operando binário que executa uma operação AND com cada par de bits dos operandos. O bit resultante é 1 se os dois bits operandos forem 1; caso contrário o resultante é 0.</p><table><thead><tr><th align="center">Bit 1</th><th align="center">Bit 2</th><th align="center">Saida</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>;   <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">9</span>;   <span class="comment">// 00001001</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a &amp; b;</span><br><span class="line">cout &gt;&gt; c</span><br></pre></td></tr></table></figure><p>Saída: <code>1</code> ou <code>00000001</code> em binário.</p><p>O operador AND também pode ser usado quando desejamos verificar se um determinado bit de um operando é 0 ou 1.  No exemplo abaixo, vamos verificar se o terceiro bit do valor armazenado em a é 0 ou 1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>;   <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">4</span>;   <span class="comment">// 00000100</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a &amp; b;</span><br><span class="line">cout &gt;&gt; c</span><br></pre></td></tr></table></figure><p>Saída: <code>4</code> ou <code>00000100</code> em binário.</p><p>Porque usamos o valor 4 para a variável <code>b</code>?</p><p>Note que o valor 4 possui todos os seus bits iguais a 0 com exceção do terceiro bit, que é o que desejamos. Sempre devemos escolher um número que possua o bit <code>1</code> na posição dos bit(s) que desejamos verificar se é <code>0</code> ou <code>1</code>. Se o nosso objetivo fosse encontrar o valor do quarto bit de a, deveríamos fazer</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">8</span>; <span class="comment">// 00001000</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = a &amp; b;</span><br><span class="line">cout &gt;&gt; c</span><br></pre></td></tr></table></figure><p>Saída: <code>8</code> ou <code>00000000</code> em binário.</p><p>Com exemplo acima percebemos que, se o o digito em questão for <code>1</code>, o resultado de <code>a &amp; b</code> será igual a ao valor armazenado em <code>b</code>. Se o digito for <code>0</code>, o resultado da operação <code>a &amp; b</code> será <code>0</code>.</p><p>Outra uso do operador <code>AND</code> é quando desejamos “desligar”, ou seja, tornar igual a <code>0</code> um determinado bit do número.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">5</span>; <span class="comment">// 00000101</span></span><br></pre></td></tr></table></figure><p>Vamos supor que desejamos desligar o terceiro bit de a. Basta realizarmos uma operação <code>AND</code> com um operando que possua o valor <code>0</code> no digito que desejamos “desligar” e <code>1</code> nos demais bits.</p><h3 id="Exemplo"><a href="#Exemplo" class="headerlink" title="Exemplo"></a>Exemplo</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">251</span>; <span class="comment">// 11111011</span></span><br></pre></td></tr></table></figure><p>Realizando o <code>AND</code>, teremos:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = a &amp; b;</span><br><span class="line">cout &gt;&gt; a;</span><br></pre></td></tr></table></figure><p>Saida: <code>1</code> ou <code>0000 0001</code> em binário.</p><p>Como podemos observar, conseguimos “desligar” o terceiro bit do valor de <code>a</code>.<br>Uma pergunta que pode surgir é como saber que valor usar em <code>b</code>. No exemplo acima utilizamos <code>b = 251</code>, mas como sabemos que esse valor daria certo. A ideia aqui é se basear na representação binária e não na decimal, ou seja, você deve encontrar um valor em binário que satisfaça a operação que você deseja (no nosso caso, o valor <code>11111011</code>).</p><p>Uma maneira de deixar esse raciocínio mais intuitivo é usar um valor diretamente na base binária ao invés da base decimal. No C++, a operação que fizemos logo acima ficaria assim:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">0b11111011</span>; <span class="comment">// 251</span></span><br><span class="line">a = a &amp; b;</span><br><span class="line">cout &gt;&gt; a;</span><br></pre></td></tr></table></figure><p>Saida: <code>1</code> ou <code>00000001</code> em binário.</p><p>Lembrando que o número de bits não deve ultrapassar a capacidade do tipo da variável. Acima utilizamos <code>unsigned char</code> que tem capacidade para <code>8 bits</code>. Se armazenarmos um valor que necessita de mais de 8 bits, esse valor será truncado (quebrado) para que possa ser armazenado em 8 bits. Provavelmente você terá uma valor errado como saída, então sempre se atente a isso, ok?</p>]]></content>
      
      
      <categories>
          
          <category> Operadores Bit-a-Bit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> binario </tag>
            
            <tag> bit-a-bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ambiente de desenvolvimento com Sublime Text</title>
      <link href="/2014/06/2014-06-03-ambiente-de-desenvolvimento-arduino/"/>
      <url>/2014/06/2014-06-03-ambiente-de-desenvolvimento-arduino/</url>
      
        <content type="html"><![CDATA[<p>Há algum tempo, tive o prazer de participar de um minicurso abordando o básico sobre o desenvolvimento usando a plataforma Arduino. Após a instalação das bibliotecas necessárias, também foi necessário instalar a Arduino IDE, um ambiente de desenvolvimento próprio para programação nessa plataforma.</p><p><img src="/images/mstuttgart/snapshot_3.png"></p><p>Apesar da IDE oferecer suporte a todos os recursos do Arduino, o seu editor de texto era simples demais, sem funções que são comuns a muitos editores, como auto-completar, fechamento automático de <em>{}</em> e entre outras coisas básicas. Uma vez que eu estou acostumado a editores de texto mais avançados, acabei me sentindo bastante desconfortável e parti em busca de outra alternativa. Foi então que descobri a combinação <code>SublimeText + Stino</code>.</p><p>O Sublime Text um editor de texto e IDE bem conhecido por programadores. Possui muitos recursos bacanas como auto-completar, suporte a múltiplas linguagens de programação e uma infinidade de plugins, temas e possui versões para diversos sistemas operacionais. O Sublime Text pode ser baixado aqui. Para Linux, temos um pacote com a extensão .deb. Para instalá-lo basta dar dois cliques no arquivo, inserir a senha de administrador e seguir com a instalação normalmente.</p><p>Com o Sublime Text instalado, vamos dar prosseguimento a instalação do plugin Stino, para suporte ao Arduino.</p><p>Inicialmente, vamos instalar o plugin que permite a instalação de packages no Sublime Text. Caso já o tenho instalado, pode ignorar estas etapas.</p><p>Execute o Sublime Text e vá em:  </p><blockquote><p>View -&gt; Show Console.</p></blockquote><p>Na área inferior da janela do Sublime Text, irá aparecer um campo de texto onde você deve colar o código encontrado aqui, de acordo com a versão do Sublime Text. Após copiar e colar o texto no campo de texto do Sublime Text, tecle Enter. Após a instalação, reinicie o Sublime Text.</p><p>Depois de reiniciar o Sublime Text, clique no menu:</p><blockquote><p>Preferences -&gt; Package Control</p></blockquote><p>No campo de texto Package Control, digite:</p><blockquote><p>Install Package</p></blockquote><p>Aguarde alguns segundo e irá aparecer outro campo de texto para você entrar com o nome do package.<br>Digite Arduino e irá aparecer um package chamado <code>Arduino Like IDE</code>. Selecione-o e aguarde alguns segundos para a instalação completar (você pode verificar o progresso da instalação na área inferior da janela do Sublime Text). Após completada a instalação, reinicie o Sublime Text.</p><p>Depois de reiniciar o Sublime Text, vá em Preferences e selecione a opção <code>Show Arduino Menu</code> (se já não estiver selecionado). Fazendo isso, um novo menu chamado “Arduino” surgirá ao lado do menu Help.</p><p>Para o próximo passo, clique em:</p><blockquote><p>Arduino -&gt; Preferences -&gt; Select Arduino Application Folder</p></blockquote><p>Insira a localização da instalação das bibliotecas do Arduino no seu sistema. A minha está em <code>/usr/share/arduino</code>.</p><p>Uma que você tenha escolhido o diretório correto, uma mensagem do tipo</p><blockquote><p>Arduino x.x.x is found at &#x2F;usr&#x2F;share&#x2F;arduino</p></blockquote><p>irá aparecer.</p><p>Agora você pode desenvolver seus programas usando o Sublime Text e utilizar as opções do menu Arduino, como compilar, fazer upload do seu código, selecionar o modelo do Arduino, a porta usada para comunicação e todos os outros recursos que a Arduino IDE possuía e muito mais. Você verá também que a velocidade de compilação e upload usando o Sublime Text é muito maior do que a realizada pela Arduino IDE.</p><p><img src="/images/mstuttgart/snapshot_4.png"></p><p>É isso pessoal. Agora você já pode se divertir com Arduino desenvolvendo seus códigos em um editor de texto profissional.</p><p>Esse tutorial foi baseado nas informações contidas <a href="https://github.com/Robot-Will/Stino">aqui</a>.</p><p>Obrigado por ler e até o próximo post!</p>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
            <tag> sublimetext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fontes de texto serrilhadas no KDE</title>
      <link href="/2014/06/2014-06-03-fontes-de-texto-serrilhadas-no-kde/"/>
      <url>/2014/06/2014-06-03-fontes-de-texto-serrilhadas-no-kde/</url>
      
        <content type="html"><![CDATA[<p>Eu tenho o KDE como meu ambiente gráfico favorito. Além de ser visualmente atraente, altamente configurável e muito fácil de usar. Mas como nem tudo é perfeito, nós as vezes encontramos alguns bugs chatos pra resolver. O bug em questão acontece após a instalação de alguns tipos de temas, deixando as fontes de todo o KDE mais finas e serrilhadas. Apesar disso ocorrer muito raramente, quando<br>acontece, as fontes não voltam ao normal mesmo que as configurações de alti-aliased das delas sejam alteradas. Eu já presenciei esse erro no KDE 4.9, 4.12 e 4.13 (o que uso atualmente). Depois de quebrar a cabeça com o bug eu finalmente consegui corrigi-lo e compartilho com vocês os passos a serem seguidos.<br>Inicialmente, vamos até o painel de configurações de fontes do KDE.</p><blockquote><p>System Settings -&gt; Application appearance -&gt; Fonts</p></blockquote><p>Onde está escrito <code>&quot;Use anti-aliasing&quot;</code> selecione a opção <code>&quot;Enable&quot;</code>, como ilustra a figura a seguir.</p><p><img src="/images/mstuttgart/snapshot_1.png" alt="Fonts"></p><p>Sem seguida, clique em <code>Configure..</code>. Uma janela com algumas opções vai abrir. Deixe as suas configurações iguais as mostradas na figura abaixo e depois clique em <code>OK</code>.</p><p><img src="/images/mstuttgart/snapshot_2.png" alt="Configure"></p><p>Terminada as configurações acima, clique no botão em <code>Apply</code> e feche a janela de configurações. Você pode perceber que mesmo configurando as fontes, elas ainda permanecem serrilhadas. Então, o próximo passo é ajustá-las manualmente.</p><p>Vá para a sua pasta <code>home/usuario</code> e procure o arquivo <code>.font.conf</code>. Os arquivos cujo nome se inicia com <code>&quot;.&quot;</code> são arquivos ocultos do sistema. Caso o arquivo <code>.font.conf</code> não apareça pra você, aperte o atalho <code>Alt + .</code> . Feito isso, os arquivos devem ficar visíveis.</p><p>Procure o arquivo <code>.font.conf</code> e o abra em um editor de texto. Feito isso, substitua todos os <code>false</code> que encontrar no arquivo por <code>true</code> e reinicie o sistema. Quando você logar novamente, verá que as fontes voltaram ao normal e não estão mais serrilhadas. Essa configuração deve ser feita apenas quando ocorrer esse bug com a fontes do KDE.</p><p>É isso pessoal. Até o próximo post.</p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kde </tag>
            
            <tag> bug </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encontre os divisores de n</title>
      <link href="/2014/05/2014-05-07-numero-de-divisores-de-n/"/>
      <url>/2014/05/2014-05-07-numero-de-divisores-de-n/</url>
      
        <content type="html"><![CDATA[<p>Nesta postagem, vamos aprender a criar um algoritmo que imprime todos os divisores de um dado número <strong>n</strong>.</p><p>Um dado valor <strong>p</strong>, onde <strong>p</strong> diferente de <strong>zero</strong>, é chamado divisor de <strong>n</strong> se o resultado da divisão de <strong>n</strong> por <strong>p</strong> resultar em um quociente inteiro e resto <strong>zero</strong>. Simplificando…</p><h3 id="Exemplo"><a href="#Exemplo" class="headerlink" title="Exemplo"></a>Exemplo</h3><p>A divisão 6&#x2F;2 possui quociente 3 e resto 0. Desse modo, temos:</p><ul><li>O dividendo n é 6;</li><li>O divisor p é 2;</li><li>O quociente q é 3;</li><li>O resto r é 0;</li></ul><p>Em outras palavras, podemos dizer que:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q * p + r = n =&gt; <span class="number">3</span> * <span class="number">2</span> + <span class="number">0</span> = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>Seguindo outro exemplo:  7&#x2F;2 possui quociente 3 e resto 1.  </p><p>Com os exemplos acima, podemos verificar que se um número <strong>n</strong> é divisivel por <strong>p</strong>, o resto da divisão de <strong>n</strong> por <strong>p</strong> é nulo. Entendido esse conceito, basta passa-lo para o código.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, resto;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Digite o valor de n: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Percorremos todo os numeros de 1 a n,   </span></span><br><span class="line">    <span class="comment">// verificando quais sao divisiveris por n  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculamos o resto da divisao   </span></span><br><span class="line">        <span class="comment">// de n por i, sendo que i vai de 1 a n  </span></span><br><span class="line">        resto = n % i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Se o resto for nulo (0), i e divisor de n.   </span></span><br><span class="line">        <span class="comment">// Imprimos o valor.</span></span><br><span class="line">        <span class="keyword">if</span>(resto == <span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>É isso. Até mais pessoal.</p>]]></content>
      
      
      <categories>
          
          <category> Algoritmos em C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> algoritmo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encontre o maior valor de um vetor</title>
      <link href="/2014/01/2014-01-17-encontrando-o-maior-valor-de-um-vetor/"/>
      <url>/2014/01/2014-01-17-encontrando-o-maior-valor-de-um-vetor/</url>
      
        <content type="html"><![CDATA[<p>O algoritmo a seguir encontra o maio valor entre um conjunto de valores armazenados em um vetor.</p><p>Os valores são armazenados em um vetor de inteiros e, em seguida, damos início ao processo de procura de maior valor.<br>A técnica utilizada é muito simples e pode ser adaptada para encontrarmos o menor valor e até mesmo para realizarmos a ordenação dos valores presentes no vetor em ordem crescente ou decrescente.</p><p>A seguir temos o algoritmo em C++, mas pode facilmente ser adaptado para outras linguagens.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>** argv )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vetor com os valores que desejamos ordenar</span></span><br><span class="line">    <span class="type">int</span> vNumeros[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Variavel que recebera o maior valor</span></span><br><span class="line">    <span class="type">int</span> maiorValor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inicializamos maiorValor com o primeiro numero do vetor</span></span><br><span class="line">    maiorValor = vNumeros[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++ )&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Aqui esta a parte importante!</span></span><br><span class="line">        <span class="keyword">if</span>( vNumeros[j] &gt; maiorValor )&#123;</span><br><span class="line">            maiorValor = vNumeros[j];</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\nO maior numero e: &quot;</span> &lt;&lt; maiorValor &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inicialmente, inicializamos a variável <code>maiorValor</code> com o primeiro valor do vetor. Fazemos isso porque ao percorremos o vetor, o começamos do primeiro valor, ou seja, do índice <code>0</code> do vetor.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maiorValor = vNumeros[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>Em seguida, utilizamos o for para percorrermos o vetor a partir da segunda posição, ou seja, do índice <code>1</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++ )&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( vNumeros[j] &gt; maiorValor )</span><br><span class="line">    maiorValor = vNumeros[j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lembre-se que o maiorValor está com o valor de <code>vNumeros[0]</code>, ou seja, <code>2</code>.</p><p>Para cada posição do vetor, verificamos se o seu valor é maior que maiorValor. Se for, atualizamos a variável maiorValor com este novo valor. Seguindo esse algoritmo, quando terminarmos de percorrer o vetor, teremos na variável maiorValor, o maior valor do vetor, ou seja, o valor 8.</p><p>Vale ressaltar que este algoritmo pode ser utilizado com outros tipos de valores, como floats, doubles, e com strings.</p><p>Até o próximo tutorial.</p>]]></content>
      
      
      <categories>
          
          <category> Algoritmos em C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> algoritmo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
